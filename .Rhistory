list.models <- lapply(data[3:(n.targets+2)], function(x) glm(data$Group_num ~ x, data = data, family = binomial))
list.CI <- lapply(names(list.models)[1:n.targets], function(x) or_glm(data = data,
model = list.models[[x]],
incr = list(x = 1),
ci = ci))
data.CI <- as.data.frame(matrix(ncol = 8, nrow = n.targets))
colnames(data.CI) <- c("Target", "oddsratio", "CI_low", "CI_high", "Intercept", "coeficient","p_intercept","p_coef")
for (x in 1:n.targets){
data.CI$Target <- names(list.models)
data.CI[x,2:4] <- as.vector(list.CI)[[x]][2:4]
data.CI[x,5:6] <- list.models[[x]]$coefficients
data.CI[x,7:8] <- coef(summary(list.models[[x]]))[,4]
}
od_df <- data.frame(yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Target,
p = data.CI$p_coef)
odd.ratio <- ggplot(od_df, aes(x = boxOdds, y = boxLabels, label = boxOdds)) +
geom_vline(aes(xintercept = centerline), linewidth = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), linewidth = .5, height = .2) +
geom_point(aes(color = p), size = 3.5) +
scale_color_continuous(type = "viridis") +
geom_text(aes(label = boxOdds), hjust=0.5, vjust = -1, size = 3) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (log.axis == TRUE){
odd.ratio <- odd.ratio +
scale_x_log10()
}
print(odd.ratio)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), odd.ratio, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
if (save.to.txt == TRUE){
write.table(data.CI, paste(name.txt,".txt", sep = ""))
}
return(data.CI)
}
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.dCt <- delta_Ct(data.CtF,
#'                      imput.by.mean.within.groups = TRUE,
#'                      ref = "Gene8")
log.reg.results <- log_reg(data.dCt,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
#'
#' RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#
#' @importFrom base print paste colnames factor
#' @importFrom dplyr filter
#' @importFrom stats reorder
#' @import ggplot2
#' @import tidyverse
#'
RQ_plot <- function(data,
use.p = TRUE,
mode,
p.threshold = 0.05,
use.log10FCh = FALSE,
log10FCh.threshold = 0,
sel.Target = "all",
bar.width = 0.8,
angle = 0,
rotate = FALSE,
colors = c("#66c2a5", "#fc8d62"),
x.axis.title = "Target",
y.axis.title = "log10(Fold change)",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Selected as significant?",
legend.title.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
dpi = 600, width = 15, height = 15,
save.to.tiff = FALSE,
name.tiff = "RQ_plot"){
if (Target.sel[1] != "all"){
data <- filter(data, Target %in% sel.Target)
}
if(sum(colnames(data) %in% "RQ") > 0){
data <- rename(data, FCh = RQ)
}
if (use.p == TRUE){
if (mode == "t"){
data$p.used <- data$t_test_p
}
if (mode == "mw"){
data$p.used <- data$MW_test_p
}
if (mode == "depends"){
data <- ungroup(data)
vars <- colnames(select(data, ends_with("norm_p")))
data <- mutate(data, test.for.comparison = ifelse(.data[[vars[[1]]]] >= 0.05 & .data[[vars[[2]]]] >= 0.05, "t.student's.test", "Mann-Whitney.test"))
data <- mutate(data, p.used = ifelse(test.for.comparison == "t.student's.test", t_test_p, MW_test_p))
}
if (mode == "user"){
colnames(user) <- c("Target","p.used")
data <- full_join(data, user, by = c("Target"))
}
if (use.log10FCh == TRUE){
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No",
no = ifelse(abs(log10(FCh)) <  log10FCh.threshold, "No", "Yes")))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes", "No"))
} else {
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No (p > 0.05)",  no = "Yes (p <= 0.05)"))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes (p <= 0.05)", "No (p > 0.05)"))
}
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh), fill = `Selected as significant?`)) +
geom_col(width = bar.width) +
scale_fill_manual(values = c(colors)) +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(fill = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank()) +
geom_hline(yintercept = 0, linewidth = 0.4)
} else {
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(width = bar.width, fill = colors[1]) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank())
}
if (angle != 0){
RQ <- RQ +
guides(x =  guide_axis(angle = angle))
}
if (rotate == TRUE){
RQ <- RQ +
coord_flip()
}
print(RQ)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), RQ, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(list(RQ, data))
}
#' RQ.ddCt.exp <- RQ_exp_ddCt(data, "Disease", "Control")
#' RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#'
#' # with user p values - in this example used p values are calculated using stats::wilcox.test() function:
#' user <- data.dCt %>%
#' pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
#'   group_by(Target) %>%
#'   summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
#'
RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#
#' @importFrom base print paste colnames factor
#' @importFrom dplyr filter
#' @importFrom stats reorder
#' @import ggplot2
#' @import tidyverse
#'
RQ_plot <- function(data,
use.p = TRUE,
mode,
p.threshold = 0.05,
use.log10FCh = FALSE,
log10FCh.threshold = 0,
sel.Target = "all",
bar.width = 0.8,
angle = 0,
rotate = FALSE,
colors = c("#66c2a5", "#fc8d62"),
x.axis.title = "Target",
y.axis.title = "log10(Fold change)",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Selected as significant?",
legend.title.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
dpi = 600, width = 15, height = 15,
save.to.tiff = FALSE,
name.tiff = "RQ_plot"){
if (sel.Target[1] != "all"){
data <- filter(data, Target %in% sel.Target)
}
if(sum(colnames(data) %in% "RQ") > 0){
data <- rename(data, FCh = RQ)
}
if (use.p == TRUE){
if (mode == "t"){
data$p.used <- data$t_test_p
}
if (mode == "mw"){
data$p.used <- data$MW_test_p
}
if (mode == "depends"){
data <- ungroup(data)
vars <- colnames(select(data, ends_with("norm_p")))
data <- mutate(data, test.for.comparison = ifelse(.data[[vars[[1]]]] >= 0.05 & .data[[vars[[2]]]] >= 0.05, "t.student's.test", "Mann-Whitney.test"))
data <- mutate(data, p.used = ifelse(test.for.comparison == "t.student's.test", t_test_p, MW_test_p))
}
if (mode == "user"){
colnames(user) <- c("Target","p.used")
data <- full_join(data, user, by = c("Target"))
}
if (use.log10FCh == TRUE){
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No",
no = ifelse(abs(log10(FCh)) <  log10FCh.threshold, "No", "Yes")))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes", "No"))
} else {
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No (p > 0.05)",  no = "Yes (p <= 0.05)"))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes (p <= 0.05)", "No (p > 0.05)"))
}
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh), fill = `Selected as significant?`)) +
geom_col(width = bar.width) +
scale_fill_manual(values = c(colors)) +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(fill = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank()) +
geom_hline(yintercept = 0, linewidth = 0.4)
} else {
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(width = bar.width, fill = colors[1]) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank())
}
if (angle != 0){
RQ <- RQ +
guides(x =  guide_axis(angle = angle))
}
if (rotate == TRUE){
RQ <- RQ +
coord_flip()
}
print(RQ)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), RQ, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(list(RQ, data))
}
#' RQ.ddCt.exp <- RQ_exp_ddCt(data, "Disease", "Control")
#' RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#'
#' # with user p values - in this example used p values are calculated using stats::wilcox.test() function:
#' user <- data.dCt %>%
#' pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
#'   group_by(Target) %>%
#'   summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
#'
RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' library(tidyverse)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' data.dCt.exp <- exp_delta_Ct(data.dCt)
#' data.dCt.expF <- filter_transformed_Ct(data.dCt.exp, remove.Sample = c("Control11"))
#' RQ.ddCt.exp <- RQ_exp_ddCt(data, "Disease", "Control")
RQ.plot <- RQ_plot(RQ.ddCt.exp, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#'                        groups = c("Disease","Control"),
#'                        panels.row = 2,
#'                        panels.col = 2)
#'
#' @importFrom base plot colnames as.data.frame ncol matrix
#' @importFrom dplyr select filter
#' @importFrom utils write.table
#' @import tidyverse
#' @import pROC
#'
ROCh <- function(data,
sel.Target = "all",
groups,
panels.row,
panels.col,
text.size = 1.1,
print.auc = TRUE,
print.auc.size = 0.8,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "ROC_plot",
save.to.txt = FALSE,
name.txt = "ROC_results"){
data <- filter(data, Group %in% groups)
if (sel.Target[1] != "all"){
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Target)]
}
roc_param <- as.data.frame(matrix(nrow = ncol(data)-2, ncol = 9))
colnames(roc_param) <- c("Target","Threshold", "Specificity", "Sensitivity", "Accuracy", "ppv", "npv", "youden", "AUC")
roc_param$Target <- colnames(data)[-c(1:2)]
for (x in 1:nrow(roc_param)){
myproc <- roc(response = data$Group, predictor = as.data.frame(data)[ ,x+2], levels = c(groups),
smooth = FALSE, auc = TRUE, plot=FALSE, ci=TRUE, of = "auc", quiet = TRUE)
parameters <- coords(myproc, "best", ret = c("threshold", "specificity", "sensitivity","accuracy", "ppv", "npv", "youden"))
roc_param[x,2:8] <- parameters
roc_param[x,9] <- myproc$auc
roc_param[x,1] <- colnames(data)[x+2]
if (nrow(parameters) > 1){
cat('Warning: ',colnames(data)[x+2],'has more than 1 threshold value for calculated Youden’s J statistic.\n')
} else {}
}
if (save.to.tiff == TRUE){
tiff(paste(name.tiff,".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
par(mfrow = c(panels.row, panels.col))
for (x in 1:nrow(roc_param)){
myproc <- roc(response = data$Group, predictor = as.data.frame(data)[ ,x+2], levels = c(groups),
smooth = FALSE, auc = TRUE, plot=FALSE, ci=TRUE, of = "auc", quiet = TRUE)
plot.roc(myproc, main = roc_param$Target[x],
smooth = FALSE, cex.axis = text.size, cex.lab = text.size, identity.lwd = 2,
plot = TRUE, percent = TRUE, print.auc = print.auc, print.auc.x = 0.85, print.auc.y = 0.1, print.auc.cex = print.auc.size)
}
dev.off()
}
if (save.to.txt == TRUE){
write.table(roc_param, paste(name.txt,".txt", sep = ""))
}
return(roc_param)
}
#' @examples
#' library(tidyverse)
#' library(pROC)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' data.dCt.expF <- filter_transformed_Ct(data.dCt.exp, remove.Sample = c("Control11"))
roc_parameters <- ROCh(data.dCt, sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
#
#' @importFrom base print paste colnames ncol lapply as.data.frame as.vrctor names summary data.frame
#' @importFrom dplyr filter
#' @importFrom stats coef
#' @importFrom utils write.table
#' @import ggplot2
#' @import tidyverse
#' @import oddsratio
#'
log_reg <- function(data,
sel.Target = "all",
group.study,
group.ref,
centerline = 1,
ci = 0.95,
log.axis = FALSE,
x.axis.title = "Odds ratio",
y.axis.title = "",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "p value",
legend.text.size = 12,
legend.title.size = 12,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "OR_plot",
save.to.txt = FALSE,
name.txt = "OR_results"){
data <- filter(data, Group %in% c(group.study, group.ref))
if (sel.Target[1] != "all"){
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Target)]
}
data <- mutate(data, Group_num = ifelse(Group == group.study, 0, 1))
n.targets <- ncol(data)-3
list.models <- lapply(data[3:(n.targets+2)], function(x) glm(data$Group_num ~ x, data = data, family = binomial))
list.CI <- lapply(names(list.models)[1:n.targets], function(x) or_glm(data = data,
model = list.models[[x]],
incr = list(x = 1),
ci = ci))
data.CI <- as.data.frame(matrix(ncol = 8, nrow = n.targets))
colnames(data.CI) <- c("Target", "oddsratio", "CI_low", "CI_high", "Intercept", "coeficient","p_intercept","p_coef")
for (x in 1:n.targets){
data.CI$Target <- names(list.models)
data.CI[x,2:4] <- as.vector(list.CI)[[x]][2:4]
data.CI[x,5:6] <- list.models[[x]]$coefficients
data.CI[x,7:8] <- coef(summary(list.models[[x]]))[,4]
}
od_df <- data.frame(yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Target,
p = data.CI$p_coef)
odd.ratio <- ggplot(od_df, aes(x = boxOdds, y = boxLabels, label = boxOdds)) +
geom_vline(aes(xintercept = centerline), linewidth = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), linewidth = .5, height = .2) +
geom_point(aes(color = p), size = 3.5) +
scale_color_continuous(type = "viridis") +
geom_text(aes(label = boxOdds), hjust=0.5, vjust = -1, size = 3) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (log.axis == TRUE){
odd.ratio <- odd.ratio +
scale_x_log10()
}
print(odd.ratio)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), odd.ratio, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
if (save.to.txt == TRUE){
write.table(data.CI, paste(name.txt,".txt", sep = ""))
}
return(data.CI)
}
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.dCt <- delta_Ct(data.CtF,
#'                      imput.by.mean.within.groups = TRUE,
#'                      ref = "Gene8")
log.reg.results <- log_reg(data.dCt,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.dCt <- delta_Ct(data.CtF,
#'                      imput.by.mean.within.groups = TRUE,
#'                      ref = "Gene8")
log.reg.results <- log_reg(data.dCt.exp,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.dCt <- delta_Ct(data.CtF,
#'                      imput.by.mean.within.groups = TRUE,
#'                      ref = "Gene8")
log.reg.results <- log_reg(data.Ct.exp,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.dCt <- delta_Ct(data.CtF,
#'                      imput.by.mean.within.groups = TRUE,
#'                      ref = "Gene8")
log.reg.results <- log_reg(data.dCt,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
library(roxygen2)
roxygenise()
library(RQdeltaCT)
