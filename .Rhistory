xlab(x.axis.title) +
ylab(y.axis.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
theme(legend.text = element_text(size = legend.text.size, colour = "black")) +
theme(legend.title = element_text(size = legend.title.size, colour = "black")) +
theme(plot.title = element_text(size = plot.title.size))
print(lines)
if (save.to.tiff == TRUE) {
ggsave(
paste(name.tiff, ".tiff", sep = ""),
lines,
dpi = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
}
return(lines)
}
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"),
order = c(4,3))
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"),
order = c(3,4))
data.dCt.pairwise.F
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"),
order = c(3,4))
parallel.plot <- parallel_plot(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19","Gene8"),
order = c(4,3))
library(tidyverse)
library(RQdeltaCT)
pca.kmeans <- pca_kmeans(data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
legend.position = "top")
pca.kmeans[[1]] + theme(legend.box = "vertical")
pca.kmeans[[2]]
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.pairwise.F[15:30, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.exp.pairwise[15:30, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.pairwise.F[1:15, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.pairwise.F,
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.pairwise.F[1:10, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCt.pairwise.F[1:10, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH",
add.coef = "white")
library(Hmisc)
library(corrplot)
corr.genes <- corr_gene(data = data.dCt.exp.pairwise,
method = "spearman",
order = "FPC",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
corr.genes <- corr_gene(data = data.dCt.pairwise.F,
method = "spearman",
order = "FPC",
size = 0.7,
p.adjust.method = "BH")
library(Hmisc)
library(corrplot)
corr.genes <- corr_gene(data = data.dCt.pairwise.F,
method = "pearson",
order = "FPC",
size = 0.7,
p.adjust.method = "BH")
library(ggpmisc)
Sample08_Sample26 <- single_pair_sample(data = data.dCt.pairwise,
x = "Sample08",
y = "Sample26",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05)
library(ggpmisc)
Sample08_Sample26 <- single_pair_sample(data = data.dCt.pairwise,
pairwise.data = TRUE,
x = "Sample08",
y = "Sample26",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05)
library(ggpmisc)
Sample08_Sample26 <- single_pair_sample(data = data.dCt.pairwise,
pairwise.data = TRUE,
by.group = TRUE,
x = "Sample08",
y = "Sample26",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05)
library(ggpmisc)
Sample08_Sample26 <- single_pair_sample(data = data.dCt.pairwise,
pairwise.data = TRUE,
by.group = TRUE,
x = "Sample08",
y = "Sample26",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05,
label.position.y = c(1, 0.95))
library(ggpmisc)
Gene16_Gene17 <- single_pair_gene(data.dCt.pairwise.F,
x = "Gene16",
y = "Gene17",
by.group = TRUE,
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95))
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.exp.pairwise,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
#'                        panels.row = 2,
#'                        panels.col = 2)
#'
#' @importFrom dplyr select filter
#' @importFrom utils write.table
#' @importFrom pROC roc coords plot.roc
#' @importFrom grDevices tiff dev.off
#' @importFrom graphics par
#' @import tidyverse
#'
ROCh <- function(data,
sel.Gene = "all",
groups,
panels.row,
panels.col,
text.size = 1.1,
print.auc = TRUE,
print.auc.size = 0.8,
save.to.tiff = FALSE,
dpi = 600,
width = 15,
height = 15,
name.tiff = "ROC_plot",
save.to.txt = FALSE,
name.txt = "ROC_results") {
data <- filter(data, Group %in% groups)
if (sel.Gene[1] != "all") {
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Gene)]
}
roc_param <- as.data.frame(matrix(nrow = ncol(data) - 2, ncol = 9))
colnames(roc_param) <-
c(
"Gene",
"Threshold",
"Specificity",
"Sensitivity",
"Accuracy",
"ppv",
"npv",
"youden",
"AUC"
)
roc_param$Gene <- colnames(data)[-c(1:2)]
for (x in 1:nrow(roc_param)) {
myproc <- roc(
response = data$Group,
predictor = as.data.frame(data)[, x + 2],
levels = c(groups),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE
)
parameters <- coords(
myproc,
"best",
ret = c(
"threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"
)
)
roc_param[x, 2:8] <- parameters
roc_param[x, 9] <- myproc$auc
roc_param[x, 1] <- colnames(data)[x + 2]
if (nrow(parameters) > 1) {
cat(
'\nWarning: ',
colnames(data)[x + 2],
'has more than 1 threshold value for calculated Youden J statistic.\n'
)
} else {
}
}
if (save.to.tiff == TRUE) {
tiff(
paste(name.tiff, ".tiff", sep = ""),
res = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
par(mfrow = c(panels.row, panels.col))
for (x in 1:nrow(roc_param)) {
myproc <- roc(
response = data$Group,
predictor = as.data.frame(data)[, x + 2],
levels = c(groups),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE
)
plot.roc(
myproc,
main = roc_param$Gene[x],
smooth = FALSE,
cex.axis = text.size,
cex.lab = text.size,
identity.lwd = 2,
plot = TRUE,
percent = TRUE,
print.auc = print.auc,
print.auc.x = 0.85,
print.auc.y = 0.1,
print.auc.cex = print.auc.size
)
}
dev.off()
}
if (save.to.txt == TRUE) {
write.table(roc_param, paste(name.txt, ".txt", sep = ""))
}
return(roc_param)
}
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.exp.pairwise,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.exp.pairwise,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.exp.pairwise,
sel.Gene = c("Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2,
save.to.tiff = TRUE)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2,
save.to.tiff = TRUE,
height = 7)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2,
save.to.tiff = TRUE,
height = 7,
print.auc.size = 0.5)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2,
save.to.tiff = TRUE,
height = 7,
print.auc.size = 0.6)
# Access to calculated parameters:
roc_parameters
data <- data.dCt.pairwise.F[, colnames(data.dCt.pairwise.F) %in% c("Group", "Sample", "Gene19")]
as.data.frame(data)$Gene19
data$Group
data_roc <- roc(response = data$Group,
predictor = as.data.frame(data)$Gene19,
levels = c("Before","After"),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE)
data_roc
?coords
parameters <- coords(myproc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters <- coords(data_roc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters
data_roc$auc
# Filter data:
data <- data.dCt.pairwise.F[, colnames(data.dCt.pairwise.F) %in% c("Group", "Sample", "Gene19")]
# Perform analysis:
data_roc <- roc(response = data$Group,
predictor = as.data.frame(data)$Gene19,
levels = c("Before","After"),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE)
# Gain parameters:
parameters <- coords(data_roc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters
# Gain AUC
data_roc$auc
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before")
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 2,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = "mean",
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(roxygen2)
roxygenise()
library(RQdeltaCT)
library(ctrlGene)
# Remember that the number of colors in col parameter should be equal to the number of tested genes:
ref.pairwise <- find_ref_gene(data = data.Ct.pairwiseF.ready,
groups = c("After","Before"),
candidates = c("Gene4","Gene13","Gene20"),
col = c("#66c2a5", "#fc8d62","#6A6599"),
angle = 30,
axis.text.size = 7,
norm.finder.score = TRUE,
genorm.score = TRUE)
