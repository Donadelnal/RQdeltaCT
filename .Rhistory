roc_parameters
knitr::include_graphics("ROC_plot.png")
# Filter data:
data <- data.dCt.pairwise.F[, colnames(data.dCt.pairwise.F) %in% c("Group", "Sample", "Gene19")]
# Perform analysis:
data_roc <- roc(response = data$Group,
predictor = as.data.frame(data)$Gene19,
levels = c("Before","After"),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE)
# Gain parameters:
parameters <- coords(data_roc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters
# Gain AUC
data_roc$auc
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE,
p.adjust = FALSE)
log.reg.results[[2]]
data("data.Ct.3groups")
str(data.Ct.3groups)
table(data.Ct.3groups$Group)
sample.Ct.control.3groups <- control_Ct_barplot_sample(data = data.Ct.3groups,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 9,
axis.text.size = 7,
plot.title.size = 9,
legend.title.size = 9,
legend.text.size = 9)
gene.Ct.control.3groups <- control_Ct_barplot_gene(data = data.Ct.3groups,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 9,
axis.text.size = 9,
plot.title.size = 9,
legend.title.size = 9,
legend.text.size = 9)
head(sample.Ct.control.3groups[[2]])
head(gene.Ct.control.3groups[[2]])
library(tidyverse)
library(pheatmap)
data("data.Ct.3groups")
# Vector of colors to fill the heatmap can be specified to fit the user needs:
colors <- c("#4575B4","#FFFFBF","#C32B23")
control_heatmap(data.Ct.3groups,
sel.Gene = "all",
colors = colors,
show.colnames = TRUE,
show.rownames = TRUE,
fontsize = 9,
fontsize.row = 9,
angle.col = 45)
# Finding samples with more than half of the unreliable Ct values.
low.quality.samples.3groups <- filter(sample.Ct.control.3groups[[2]], Not.reliable.fraction > 0.5)$Sample
low.quality.samples.3groups <- as.vector(low.quality.samples.3groups)
low.quality.samples.3groups
# Finding genes with more than half of the unreliable Ct values in given group.
low.quality.genes.3groups <- filter(gene.Ct.control.3groups[[2]], Not.reliable.fraction > 0.5)$Gene
low.quality.genes.3groups <- unique(as.vector(low.quality.genes.3groups))
low.quality.genes.3groups
# Data filtering
data.CtF.3groups <- filter_Ct(data = data.Ct.3groups,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
remove.Gene = low.quality.genes.3groups,
remove.Sample = low.quality.samples.3groups)
# Collapsing technical replicates without imputation:
data.CtF.ready.3groups <- make_Ct_ready(data = data.CtF.3groups,
imput.by.mean.within.groups = FALSE)
# A part of the data with missing values:
as.data.frame(data.CtF.ready.3groups)[25:30,]
# Collapsing technical replicates with imputation:
data.CtF.ready.3groups <- make_Ct_ready(data = data.CtF.3groups,
imput.by.mean.within.groups = TRUE)
# Missing values were imputed:
as.data.frame(data.CtF.ready.3groups)[25:30,]
library(ctrlGene)
# Remember that the number of colors in col parameter should be equal to the number of tested genes:
ref.3groups <- find_ref_gene(data = data.CtF.ready.3groups,
groups = c("AAA","Control","VV"),
candidates = c("CCL5", "GAPDH","IL1B","TGFB", "VEGFA"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#1F77B4", "black"),
angle = 60,
axis.text.size = 7,
norm.finder.score = TRUE,
genorm.score = TRUE)
ref.3groups[[2]]
# For 2-dCt method:
data.dCt.exp.3groups <- delta_Ct(data = data.CtF.ready.3groups,
normalise = TRUE,
ref = "VEGFA",
transform = TRUE)
# For 2-ddCt method:
data.dCt.3groups <- delta_Ct(data = data.CtF.ready.3groups,
normalise = TRUE,
ref = "VEGFA",
transform = FALSE)
control_boxplot_sample_3groups <- control_boxplot_sample(data = data.dCt.3groups,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
axis.text.size = 7)
control_boxplot_gene_3groups <- control_boxplot_gene(data = data.dCt.3groups,
by.group = TRUE,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
axis.text.size = 10)
control.pca.sample.3groups <- control_pca_sample(data = data.dCt.3groups,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
point.size = 3,
label.size = 2.5,
legend.position = "top")
control.pca.gene.3groups <- control_pca_gene(data = data.dCt.3groups)
control_cluster_sample(data = data.dCt.3groups,
method.dist = "euclidean",
method.clust = "average",
label.size = 0.5)
control_cluster_gene(data = data.dCt.3groups,
method.dist = "euclidean",
method.clust = "average",
label.size = 0.5)
data.dCtF.3groups <- filter_transformed_data(data = data.dCt.3groups,
remove.Sample = c("AAA14"))
# Example of 2-dCt method used for comparison VV vs. Control group
data.dCt.exp.3groups <- delta_Ct(data = data.CtF.ready.3groups,
ref = "VEGFA",
transform = TRUE)
library(coin)
results.dCt.3groups <- RQ_dCt(data = data.dCt.exp.3groups,
do.tests = TRUE,
group.study = "VV",
group.ref = "Control")
# Obtained table can be sorted by, e.g. p values from the Mann-Whitney U test:
head(as.data.frame(arrange(results.dCt.3groups, MW_test_p)))
# Example of 2-ddCt method used for comparison VV vs. Control group
data.dCt.3groups <- delta_Ct(data = data.CtF.ready.3groups,
ref = "VEGFA",
transform = FALSE)
library(coin)
results.ddCt.3groups <- RQ_ddCt(data = data.dCt.3groups,
group.study = "VV",
group.ref = "Control",
do.tests = TRUE)
# Obtained table can be sorted by, e.g. p values from the Mann-Whitney U test:
head(as.data.frame(arrange(results.ddCt.3groups, MW_test_p)))
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt,
increment = 1,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control")
log.reg.results[[2]]
log.reg.results[[2]]
log.reg.results.sorted <- log.reg.results[[1]] +
scale_y_discrete(limits = rev(sort(log.reg.results[[2]]$Gene)))
log.reg.results.sorted
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE,
p.adjust = FALSE)
log.reg.results[[2]]
log.reg.results.sorted <- log.reg.results[[1]] +
scale_y_discrete(limits = rev(sort(log.reg.results[[2]]$Gene)))
log.reg.results.sorted
data("data.Ct.3groups")
str(data.Ct.3groups)
table(data.Ct.3groups$Group)
final_boxplot_3groups <- results_boxplot(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
by.group = TRUE,
signif.show = TRUE,
signif.labels = c("****","***","*"),
signif.dist = 1.05,
faceting = TRUE,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
angle = 20,
y.axis.title = "dCt")
final_barplot_3groups <- results_barplot(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB","VEGFC"),
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
signif.show = TRUE,
signif.labels = c("****","***","*"),
angle = 30,
signif.dist = 1.05,
faceting = TRUE,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = "dCt")
# Draw plot without statistical significance labels:
final_boxplot_3groups <- results_boxplot(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
by.group = TRUE,
signif.show = FALSE, # It avoids drawing labels
faceting = TRUE,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.2,
angle = 20,
y.axis.title = "dCt")
# Prepare expression data:
data <- pivot_longer(data.dCtF.3groups,
!c(Sample, Group),
names_to = "Gene" ,
values_to = "value")
# filter for genes:
data <- filter(data, Gene %in% c("ANGPT1","VEGFB", "VEGFC"))
# Find maximum value in each group:
label.height <- data %>%
group_by(Gene) %>%
summarise(height = max(value), .groups = "keep")
# Prepare empty data frame:
data.label.empty <- data.frame(matrix(nrow = length(unique(label.height$Gene)), ncol = 4))
rownames(data.label.empty) <- label.height$Gene
colnames(data.label.empty) <- c("x", "xend", "y", "annotation")
data.label.empty$Gene <- rownames(data.label.empty)
# Fill a data frame with coordinates for right pair:
data.label.right <- data.label.empty
data.label.right$x <- rep(1.01, nrow(data.label.right))
data.label.right$xend <- rep(1.25, nrow(data.label.right))
data.label.right$y <- label.height$height + 0.5
data.label.right$annotation <- c("right1","right2","right3")
# Fill a data frame with coordinates for left pair:
data.label.left <- data.label.empty
data.label.left$x <- rep(0.98, nrow(data.label.left))
data.label.left$xend <- rep(0.75, nrow(data.label.left))
data.label.left$y <- label.height$height + 0.5
data.label.left$annotation <- c("left1","left2","left3")
# Fill a data frame with coordinates for edge pair:
data.label.edge <- data.label.empty
data.label.edge$x <- rep(0.75, nrow(data.label.edge))
data.label.edge$xend <- rep(1.25, nrow(data.label.edge))
data.label.edge$y <- label.height$height + 1.2
data.label.edge$annotation <- c("edge1","edge2","edge3")
final_boxplot_3groups +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12))) # it makes space for labels
final_barplot_3groups <- results_barplot(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB","VEGFC"),
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
signif.show = FALSE,
angle = 30,
faceting = TRUE,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = "dCt")
# Prepare expression data:
data <- pivot_longer(data.dCtF.3groups,
!c(Sample, Group),
names_to = "Gene" ,
values_to = "value")
# filter for genes:
data <- filter(data, Gene %in% c("ANGPT1","VEGFB", "VEGFC"))
# Calculate mean and standard deviation for each group:
data.mean <- data %>%
group_by(Group, Gene) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "keep")
data.sd <- data %>%
group_by(Group, Gene) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "keep")
data.mean$sd <- data.sd$sd
#Find the highest values:
label.height <- data.mean %>%
mutate(max = mean + sd) %>%
group_by(Gene) %>%
summarise(height = max(max, na.rm = TRUE), .groups = "keep")
# Prepare empty data frame:
data.label.empty <- data.frame(matrix(nrow = length(unique(data.mean$Gene)), ncol = 4))
rownames(data.label.empty) <- unique(data.mean$Gene)
colnames(data.label.empty) <- c("x", "xend", "y", "annotation")
data.label.empty$Gene <- rownames(data.label.empty)
# Fill a data frame with coordinates for left pair:
data.label.left <- data.label.empty
data.label.left$x <- rep(0.97, nrow(data.label.left))
data.label.left$xend <- rep(0.7, nrow(data.label.left))
data.label.left$y <- label.height$height + 0.3
data.label.left$annotation <- c("left1","left2","left3")
# Fill a data frame with coordinates for left pair:
data.label.right <- data.label.empty
data.label.right$x <- rep(1.01, nrow(data.label.right))
data.label.right$xend <- rep(1.28, nrow(data.label.right))
data.label.right$y <- label.height$height + 0.3
data.label.right$annotation <- c("right1","right2","right3")
# Fill a data frame with coordinates for edge pair:
data.label.edge <- data.label.empty
data.label.edge$x <- rep(0.7, nrow(data.label.edge))
data.label.edge$xend <- rep(1.28, nrow(data.label.edge))
data.label.edge$y <- label.height$height + 1
data.label.edge$annotation <- c("edge1","edge2","edge3")
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
# Create named list with colors for groups annotation:
colors.for.groups = list("Group" = c("AAA"="#f98517","Control"="#33b983", "VV"="#bf8cfc"))
# Vector of colors for heatmap:
colors <- c("navy","navy","#313695","#4575B4","#74ADD1","#ABD9E9",
"#E0F3F8","#FFFFBF","#FEE090","#FDAE61","#F46D43",
"#D73027","#C32B23","#A50026","#8B0000",
"#7E0202","#000000")
results_heatmap(data.dCtF.3groups,
sel.Gene = "all",
col.groups = colors.for.groups,
colors = colors,
show.colnames = FALSE,
show.rownames = TRUE,
fontsize = 11,
fontsize.row = 11,
cellwidth = 4)
# Cellwidth parameter was set to 4 to avoid cropping the image on the right side.
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 3,
clust.names = c("Cluster1", "Cluster2", "Cluster3"),
point.shape = c(19, 17, 18),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
# Access to the confusion matrix:
pca.kmeans[[2]]
pca.kmeans[[1]] + theme(legend.box = "vertical")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCtF.3groups[15:30, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH",
add.coef = "white")
library(Hmisc)
library(corrplot)
corr.genes <- corr_gene(data = data.dCtF.3groups,
method = "spearman",
order = "FPC",
size = 0.7,
p.adjust.method = "BH")
library(ggpmisc)
AAA6_AAA43 <- single_pair_sample(data = data.dCtF.3groups,
x = "AAA6",
y = "AAA43",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05)
library(ggpmisc)
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = FALSE,
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95))
library(ggpmisc)
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = TRUE,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"), # Vector of colors
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95,0.9)) # Labels position
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to be sufficient to arrange panels:
roc_parameters <- ROCh(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
groups = c("Control","VV"),
panels.row = 2,
panels.col = 2)
roc_parameters
knitr::include_graphics("ROC_plot_3groups.png")
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCtF.3groups,
increment = 1,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
group.study = "VV",
group.ref = "Control")
log.reg.results[[2]]
log.reg.results.sorted <- log.reg.results[[1]] +
scale_y_discrete(limits = rev(sort(log.reg.results[[2]]$Gene)))
log.reg.results.sorted
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
library(roxygen2)
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
library(RQdeltaCT)
getwd()
build()
library(devtools)
build()
library(RQdeltaCT)
usethis::use_citation()
library(RQdeltaCT)
citation("RQdeltaCT")
citation("RQdeltaCT")
?citHeader
citation("RQdeltaCT")
citation("RQdeltaCT")
usethis::use_citation()
?bibentry
citation("RQdeltaCT")
citation("RQdeltaCT")
readCitationFile("inst/CITATION")
library()
library(RQdeltaCT)
citation("RQdeltaCT")
library(RQdeltaCT)
