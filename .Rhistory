}
if (angle != 0){
RQ <- RQ +
guides(x =  guide_axis(angle = angle))
}
if (rotate == TRUE){
RQ <- RQ +
coord_flip()
}
print(RQ)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), RQ, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(list(RQ, data))
}
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),
angle = 30,
signif.dist = 0.1,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),
angle = 30,
signif.dist = -0.1,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
data.label
signif.dist
log10(data$FCh)
log10(RQ.ddCt$FCh)
data.label <- mutate(data.label, y = ifelse(log10(RQ.ddCt$FCh) > 0, log10(RQ.ddCt$FCh) + signif.dist, log10(RQ.ddCt$FCh) - signif.dist))
data.label
#'
#' RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#
#' @importFrom base print paste colnames factor
#' @importFrom dplyr filter
#' @importFrom stats reorder
#' @import ggplot2
#' @import tidyverse
#'
RQ_plot <- function(data,
use.p = TRUE,
mode,
p.threshold = 0.05,
use.log10FCh = FALSE,
log10FCh.threshold = 0,
sel.Target = "all",
bar.width = 0.8,
signif.show = TRUE,
signif.labels,
signif.length = 0.2,
signif.dist = 0.05,
y.exp.low = 0.1,
y.exp.up = 0.2,
angle = 0,
rotate = FALSE,
colors = c("#66c2a5", "#fc8d62"),
x.axis.title = "",
y.axis.title = "log10(Fold change)",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Selected as significant?",
legend.title.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
dpi = 600, width = 15, height = 15,
save.to.tiff = FALSE,
name.tiff = "RQ_plot"){
if (sel.Target[1] != "all"){
data <- filter(data, Target %in% sel.Target)
}
if (use.p == TRUE){
if (mode == "t"){
data$p.used <- data$t_test_p
}
if (mode == "mw"){
data$p.used <- data$MW_test_p
}
if (mode == "depends"){
data <- ungroup(data)
vars <- colnames(select(data, ends_with("norm_p")))
data <- mutate(data, test.for.comparison = ifelse(.data[[vars[[1]]]] >= 0.05 & .data[[vars[[2]]]] >= 0.05, "t.student's.test", "Mann-Whitney.test"))
data <- mutate(data, p.used = ifelse(test.for.comparison == "t.student's.test", t_test_p, MW_test_p))
}
if (mode == "user"){
colnames(user) <- c("Target","p.used")
data <- full_join(data, user, by = c("Target"))
}
if (use.log10FCh == TRUE){
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No",
no = ifelse(abs(log10(FCh)) <  log10FCh.threshold, "No", "Yes")))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes", "No"))
} else {
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No (p > 0.05)",  no = "Yes (p <= 0.05)"))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes (p <= 0.05)", "No (p > 0.05)"))
}
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(aes(fill = `Selected as significant?`, group = `Selected as significant?`), width = bar.width) +
scale_fill_manual(values = c(colors)) +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(fill = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank()) +
geom_hline(yintercept = 0, linewidth = 0.4)
} else {
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(width = bar.width, fill = colors[1]) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank())
}
if (signif.show == TRUE) {
data.label <- data.frame(matrix(nrow = nrow(data), ncol = 4))
colnames(data.label) <- c("x", "xend", "y", "annotation")
data <- arrange(data, desc(FCh))
data.label$x <- (1:nrow(data)) - signif.length
data.label$xend <- (1:nrow(data)) + signif.length
data.label <- mutate(data.label, y = ifelse(log10(data$FCh) > 0,
log10(data$FCh) + signif.dist,
log10(data$FCh) - signif.dist))
data.label$annotation <- signif.labels
RQ <- RQ +
geom_signif(stat = "identity",
data = data.label,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(y.exp.low, y.exp.up)))
}
if (angle != 0){
RQ <- RQ +
guides(x =  guide_axis(angle = angle))
}
if (rotate == TRUE){
RQ <- RQ +
coord_flip()
}
print(RQ)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), RQ, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(list(RQ, data))
}
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),
angle = 30,
signif.dist = 0.05,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),
angle = 30,
signif.dist = 0.1,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
#'
#' RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
#' head(RQ.plot[[2]])
#
#' @importFrom base print paste colnames factor
#' @importFrom dplyr filter
#' @importFrom stats reorder
#' @import ggplot2
#' @import tidyverse
#'
RQ_plot <- function(data,
use.p = TRUE,
mode,
p.threshold = 0.05,
use.log10FCh = FALSE,
log10FCh.threshold = 0,
sel.Target = "all",
bar.width = 0.8,
signif.show = TRUE,
signif.labels,
signif.length = 0.2,
signif.dist = 0.1,
y.exp.low = 0.1,
y.exp.up = 0.1,
angle = 0,
rotate = FALSE,
colors = c("#66c2a5", "#fc8d62"),
x.axis.title = "",
y.axis.title = "log10(Fold change)",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Selected as significant?",
legend.title.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
dpi = 600, width = 15, height = 15,
save.to.tiff = FALSE,
name.tiff = "RQ_plot"){
if (sel.Target[1] != "all"){
data <- filter(data, Target %in% sel.Target)
}
if (use.p == TRUE){
if (mode == "t"){
data$p.used <- data$t_test_p
}
if (mode == "mw"){
data$p.used <- data$MW_test_p
}
if (mode == "depends"){
data <- ungroup(data)
vars <- colnames(select(data, ends_with("norm_p")))
data <- mutate(data, test.for.comparison = ifelse(.data[[vars[[1]]]] >= 0.05 & .data[[vars[[2]]]] >= 0.05, "t.student's.test", "Mann-Whitney.test"))
data <- mutate(data, p.used = ifelse(test.for.comparison == "t.student's.test", t_test_p, MW_test_p))
}
if (mode == "user"){
colnames(user) <- c("Target","p.used")
data <- full_join(data, user, by = c("Target"))
}
if (use.log10FCh == TRUE){
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No",
no = ifelse(abs(log10(FCh)) <  log10FCh.threshold, "No", "Yes")))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes", "No"))
} else {
data <- mutate(data, `Selected as significant?` = ifelse(p.used > p.threshold, yes = "No (p > 0.05)",  no = "Yes (p <= 0.05)"))
data$`Selected as significant?` <- factor(data$`Selected as significant?`, levels = c("Yes (p <= 0.05)", "No (p > 0.05)"))
}
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(aes(fill = `Selected as significant?`, group = `Selected as significant?`), width = bar.width) +
scale_fill_manual(values = c(colors)) +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(fill = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank()) +
geom_hline(yintercept = 0, linewidth = 0.4)
} else {
RQ <- ggplot(data, aes(x = reorder(Target, -FCh), y = log10(FCh))) +
geom_col(width = bar.width, fill = colors[1]) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank())
}
if (signif.show == TRUE) {
data.label <- data.frame(matrix(nrow = nrow(data), ncol = 4))
colnames(data.label) <- c("x", "xend", "y", "annotation")
data <- arrange(data, desc(FCh))
data.label$x <- (1:nrow(data)) - signif.length
data.label$xend <- (1:nrow(data)) + signif.length
data.label <- mutate(data.label, y = ifelse(log10(data$FCh) > 0,
log10(data$FCh) + signif.dist,
log10(data$FCh) - signif.dist))
data.label$annotation <- signif.labels
RQ <- RQ +
geom_signif(stat = "identity",
data = data.label,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(y.exp.low, y.exp.up)))
}
if (angle != 0){
RQ <- RQ +
guides(x =  guide_axis(angle = angle))
}
if (rotate == TRUE){
RQ <- RQ +
coord_flip()
}
print(RQ)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), RQ, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(list(RQ, data))
}
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n"),
angle = 30,
signif.dist = 0.1,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = annotation.vector
angle = 30,
RQ.plot <- RQ_plot(RQ.ddCt,
mode = "depends",
use.log10FCh = TRUE,
log10FCh.threshold = 0.30103,
signif.show = TRUE,
signif.labels = annotation.vector,
angle = 30,
signif.dist = 0.1,
y.exp.up = 0.1
)
RQ.ddCt
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' data.dCt.exp <- exp_delta_Ct(data.dCt)
#' data.dCt.expF <- filter_transformed_data(data.dCt.exp, remove.Sample = c("Control11"))
#' RQ.ddCt <- RQ_ddCt(data, "Disease", "Control")
#'
signif.labels <- c("****","**","ns."," ns. ","  ns.  ","   ns.   ","    ns.    ","     ns.     ","      ns.      ","       ns.       ",        "ns.        ","         ns.         ","          ns.          ","***")
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
library(roxygen2)
roxygenise()
remove.packages("RQdeltaCT")
library(RQdeltaCT)
?find_ref_gene
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ctrlGene
#' @import ggplot2
#' @import tidyverse
#'
find_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
guides(x =  guide_axis(angle = angle)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model2)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
reference.stability.nF <- norm_finder(data, candidates = candidates)
colnames(reference.stability.nF) <- "NormFinder_score"
reference.stability.nF$Target <- rownames(reference.stability.nF)
data <- data %>%
ungroup() %>%
select(-Group) %>%
select(any_of(c("Sample", candidates))) %>%
as.data.frame()
rownames(data) <- data[,"Sample"]
data <- select(data, -Sample)
data <- as.matrix(data)
reference.stability.gF <- geNorm(data,
genes = data.frame(Target = character(0), geNorm_score = numeric(0)),
ctVal = TRUE)
colnames(reference.stability.gF) <- c("Target", "geNorm_score")
results <- ref_var %>%
full_join(reference.stability.nF, by = join_by(Target)) %>%
full_join(reference.stability.gF, by = join_by(Target))
return(list(ref_plot, results))
}
library(RQdeltaCT)
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "Ct_reference_gene_selection".
#'
#' @return List containing plot object and table with calculated parameters. Created plot is displayed on graphic device.
#'
#' @export
#'
#' @examples
#' library(car)
#' library(ctrlGene)
#' library(tidyverse)
data(data.Ct)
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data(data.Ct)
data.Ct
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
filter_Ct
#' @param dpi integer: resolution of saved .tiff file. Default to 600.
#' @param width numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height integer: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "Ct_reference_gene_selection".
#'
#' @return List containing plot object and table with calculated parameters. Created plot is displayed on graphic device.
#'
#' @export
#'
#' @examples
library(car)
library(ctrlGene)
library(tidyverse)
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
ref <- find_ref_gene(data.CtF.ready, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
