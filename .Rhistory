labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model2)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
reference.stability.nF <- norm_finder(data, candidates = candidates)
colnames(reference.stability.nF) <- "NormFinder_score"
reference.stability.nF$Target <- rownames(reference.stability.nF)
data <- data %>%
ungroup() %>%
select(-Group) %>%
select(any_of(c("Sample", candidates))) %>%
as.data.frame()
rownames(data) <- data[,"Sample"]
data <- select(data, -Sample)
data <- as.matrix(data)
reference.stability.gF <- geNorm(data,
genes = data.frame(Target = character(0), geNorm_score = numeric(0)),
ctVal = TRUE)
colnames(reference.stability.gF) <- c("Target", "geNorm_score")
results <- ref_var %>%
full_join(reference.stability.nF, by = join_by(Target)) %>%
full_join(reference.stability.gF, by = join_by(Target))
return(list(ref_plot, results))
}
library(RQdeltaCT)
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "Ct_reference_gene_selection".
#'
#' @return List containing plot object and table with calculated parameters. Created plot is displayed on graphic device.
#'
#' @export
#'
#' @examples
#' library(car)
#' library(ctrlGene)
#' library(tidyverse)
data(data.Ct)
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data(data.Ct)
data.Ct
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
filter_Ct
#' @param dpi integer: resolution of saved .tiff file. Default to 600.
#' @param width numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height integer: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "Ct_reference_gene_selection".
#'
#' @return List containing plot object and table with calculated parameters. Created plot is displayed on graphic device.
#'
#' @export
#'
#' @examples
library(car)
library(ctrlGene)
library(tidyverse)
data.CtF <- filter_Ct(data.Ct,
remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
ref <- find_ref_gene(data.CtF.ready, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
remove.packages("RQdeltaCT")
library(roxygen2)
roxygenise()
credentials::set_github_pat()
remotes::install_github("Donadelnal/RQdeltaCT")
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ctrlGene
#' @import ggplot2
#' @import tidyverse
#'
find_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
guides(x =  guide_axis(angle = angle)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model2)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
reference.stability.nF <- norm_finder(data, candidates = candidates)
colnames(reference.stability.nF) <- "NormFinder_score"
reference.stability.nF$Target <- rownames(reference.stability.nF)
data <- data %>%
ungroup() %>%
select(-Group) %>%
select(any_of(c("Sample", candidates))) %>%
as.data.frame()
rownames(data) <- data[,"Sample"]
data <- select(data, -Sample)
data <- as.matrix(data)
reference.stability.gF <- geNorm(data,
genes = data.frame(Target = character(0), geNorm_score = numeric(0)),
ctVal = TRUE)
colnames(reference.stability.gF) <- c("Target", "geNorm_score")
results <- ref_var %>%
full_join(reference.stability.nF, by = join_by(Target)) %>%
full_join(reference.stability.gF, by = join_by(Target))
return(list(ref_plot, results))
}
credentials::set_github_pat()
remotes::install_github("Donadelnal/RQdeltaCT")
library(RQdeltaCT)
library(tidyverse)
data(data.Ct)
data.Ct
data <- select(data.Ct, -Flag)
data
data <- pivot_wider(data, names_from = Target, values_from = Ct)
data <- pivot_wider(id_cols = !c(Group, Sample)  data, names_from = Target, values_from = Ct)
data <- pivot_wider(id_cols = !c(Group, Sample), data, names_from = Target, values_from = Ct)
data <- select(data.Ct, -Flag)
data <- pivot_wider(id_cols = !c(Group, Sample), data, names_from = Target, values_from = Ct)
data <- select(data.Ct, -Flag)
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
data(data.Ct)
data <- select(data.Ct, -Flag)
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
data
data <- pivot_wider(data, id_cols = !c(Group), names_from = Target, values_from = Ct)
data <- select(data.Ct, -Flag)
data <- pivot_wider(data, id_cols = !c(Group), names_from = Target, values_from = Ct)
data
data <- select(data.Ct, -Flag)
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
data <- data.Ct %>%
select(-Flag) %>%
group_by(Group)
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
data <- data.Ct %>%
select(-Flag) %>%
group_by(Target)
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
data <- data.Ct %>%
select(-Flag) %>%
group_by(Target)
data
data <- pivot_wider(data, id_cols = !c(Group, Sample), names_from = Target, values_from = Ct)
# Set a paths to required files:
path.Ct.file <- system.file("extdata",
"data_Ct_wide.txt",
package = "RQdeltaCT")
path.design.file <- system.file("extdata",
"data_design.txt",
package = "RQdeltaCT")
# Import files:
library(tidyverse)
data.Ct <- read_Ct_wide(path.Ct.file = path.Ct.file,
path.design.file = path.design.file,
sep ="\t",
dec = ".")
# Look at the structure:
str(data.Ct)
data.Ct
data <- pivot_wider(data.Ct, id_cols = !c(Group, Sample), names_from = "Target", values_from = "Ct")
data
data.Ct
data <- data.Ct %>%
group.by(Group) %>%
pivot_wider(data.Ct, id_cols = !c(Group, Sample), names_from = "Target", values_from = "Ct")
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(data.Ct, id_cols = !c(Group, Sample), names_from = "Target", values_from = "Ct")
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(id_cols = !c(Group, Sample), names_from = "Target", values_from = "Ct")
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(id_cols = !c(Sample), names_from = "Target", values_from = "Ct")
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(id_cols = !c(Group), names_from = "Target", values_from = "Ct")
data
data$Group <- data.Ct$Group
data.Ct
data
data.Ct$Group
data
table(data.Ct$Target, data.Ct$Group)
table(data.Ct$Sample, data.Ct$Group)
table(data.Ct$Group, data.Ct$Sample)
table(data.Ct$Group, data.Ct$Sample)
table(data.Ct$Group, data.Ct$Target)
data
data$Sample
table(data$Sample)
data$Group <- c(rep("Disease",40), rep("Control",24))
data$Group
data$Sample
data
data <- select(data, Group, everything())
data.Ct
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(id_cols = !c(Group), names_from = "Target", values_from = "Ct")
data$Group <- c(rep("Disease",40), rep("Control",24))
data <- select(data, Group, everything())
data <- data.Ct %>%
group_by(Group) %>%
pivot_wider(id_cols = !c(Group), names_from = "Target", values_from = "Ct")
data$Group <- c(rep("Disease",40), rep("Control",24))
data
data <- select(data, Group, everything())
data
write.csv(data, "data.Ct.wide.vign.txt")
data.Ct.wide <- read.csv(data, "vignettes/data.Ct.wide.vign.txt")
data.Ct.wide <- read.csv("vignettes/data.Ct.wide.vign.txt")
data.Ct.wide <- read.csv("vignettes/data/data.Ct.wide.vign.txt")
getwd()
data.Ct.wide <- read.csv("data/data.Ct.wide.vign.txt")
data.Ct.wide
str(data.Ct.wide)
head(data.Ct.wide)
str(data.Ct.wide)
data.Ct.wide
data.Ct.wide <- pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
data.Ct.wide <- pivot_longer(data.Ct.wide, cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
data.Ct.wide
data.Ct.wide <- read.csv("data/data.Ct.wide.vign.txt")
str(data.Ct.wide)
data
str(data.Ct.wide)
data.Ct <- data.Ct.wide %>%
select(-X) %>%
pivot_longer(data.Ct.wide, cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
data.Ct <- data.Ct.wide %>%
select(-X) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
data.Ct <- data.Ct.wide %>%
select(-X) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
data.Ct
str(data.Ct.wide)
str(data.Ct)
?read.csv
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
data.Ct.wide
data.Ct <- data.Ct.wide %>%
select(-X) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct")
str(data.Ct)
sample.Ct.control <- control_Ct_barplot_sample(data.Ct,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 8,
axis.text.size = 7,
plot.title.size = 8,
legend.title.size = 8,
legend.text.size = 8)
target.Ct.control <- control_Ct_barplot_target(data.Ct,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 8,
axis.text.size = 8,
plot.title.size = 8,
legend.title.size = 8,
legend.text.size = 8)
sample.Ct.control[[2]][,1:14]
target.Ct.control[[2]]
sample.Ct.control[[2]]
as.data.frame(sample.Ct.control[[2]])
sample.control.table <- as.data.frame(sample.Ct.control[[2]])
sample.control.table
sample.control.table <- pivot_wider(sample.control.table, names_from = Var1, values_from = Freq)
sample.control.table
sample.control.table <- as.data.frame(sample.Ct.control[[2]])
sample.control.table
sample.control.table <- pivot_wider(sample.control.table, names_from = Var1, values_from = Freq)
sample.control.table
sample.control.table <- sample.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq)
sample.control.table
sample.control.table <- sample.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(No)
sample.control.table
sample.control.table <- sample.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No))
sample.control.table
sample.control.table <- sample.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
sample.control.table
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
library(tidyverse)
library(RQdeltaCT)
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
target.control.table
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame()
target.control.table
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
select(-Var3 %>%)
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
select(-Var3) %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
select(-Var3)
target.control.table
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
select(-Var3) %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No))
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
#select(-Var3) %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No))
target.control.table
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
target.control.table
# Tables are converted to data frame, transformed to long-format structure, sorted by descending number of unreliable values, and finally fraction of unreliable values is calculated and stored in No.fraction column.
sample.control.table <- sample.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
head(sample.control.table)
target.control.table <- target.Ct.control[[2]] %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(No.fraction = No/(No+Yes))
head(target.control.table)
data.Ct.exp <- exp_Ct_dCt(data.CtF.ready)
log10(3)
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
#' @param path.design.file path to .txt file with two columns: column named "Sample" with names of samples
#' and column named "Group" with names of groups assigned to samples. Names of samples in this file
#' should correspond to the names of columns in file with Ct values.
#' @param sep character of a field separator in both imported files.
#' @param dec character used for decimal points in Ct values.
#'
#' @return Data frame in long format ready to analysis.
#' @export
#'
#' @examples
path.Ct.file <- system.file("extdata", "data_Ct_wide.txt", package = "RQdeltaCT")
path.design.file <- system.file("extdata", "data_design.txt", package = "RQdeltaCT")
data.Ct <- read_Ct_wide(path.Ct.file = path.Ct.file,
path.design.file = path.design.file,
sep ="\t",
dec = ".")
str(data.Ct)
#'
#' @importFrom utils read.csv
#' @importFrom tidyr pivot_longer
#' @importFrom base which
#' @import tidyverse
#'
read_Ct_wide <- function(path.Ct.file,
path.design.file,
sep,
dec){
data_wide <- read.csv(path.Ct.file,
header = TRUE,
sep = sep,
dec = dec)
data_wide_design <- read.csv(path.design.file,
header = TRUE,
sep = sep)
colnames(data_wide)[1] <- "Gene"
data_wide <- mutate(data_wide, across(everything(), as.character))
data_slim <- pivot_longer(data_wide, -Gene, names_to = "Sample", values_to = "Ct")
data_slim[ ,"Group"] <- NA
for (x in 1:nrow(data_wide_design)) {
index <- which(data_slim$Sample == data_wide_design$Sample[x])
data_slim$Group[index] <- data_wide_design$Group[x]
}
return(data_slim)
}
data.Ct <- read_Ct_wide(path.Ct.file = path.Ct.file,
path.design.file = path.design.file,
sep ="\t",
dec = ".")
str(data.Ct)
library(RQdeltaCT)
library(RQdeltaCT)
