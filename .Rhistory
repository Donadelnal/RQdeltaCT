geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
data.label.left$x <- rep(0.97, nrow(data.label.left))
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
data.label.edge$x <- rep(0.7, nrow(data.label.edge))
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
data.label.right$xend <- rep(1.3, nrow(data.label.right))
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
data.label.right$xend <- rep(1.28, nrow(data.label.right))
data.label.edge$xend <- rep(1.28, nrow(data.label.edge))
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
data.label.left$y <- label.height$height + 0.3
data.label.right$y <- label.height$height + 0.3
data.label.edge$y <- label.height$height + 1
final_barplot_3groups +
geom_signif(
stat = "identity",
data = data.label.left,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.right,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
geom_signif(
stat = "identity",
data = data.label.edge,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.12)))
# Create named list with colors for groups annotation:
colors.for.groups = list("Group" = c("AAA"="#f98517","Control"="#33b983", "VV"="#bf8cfc"))
# Vector of colors for heatmap can be also specified to fit the user needings:
colors <- c("navy","navy","#313695","#4575B4","#74ADD1","#ABD9E9",
"#E0F3F8","#FFFFBF","#FEE090","#FDAE61","#F46D43",
"#D73027","#C32B23","#A50026","#8B0000",
"#7E0202","#000000")
results_heatmap(data.dCtF.3groups,
sel.Gene = "all",
col.groups = colors.for.groups,
colors = colors,
show.colnames = FALSE,
show.rownames = TRUE,
fontsize = 11,
fontsize.row = 11,
cellwidth = 4)
results_heatmap(data.dCtF.3groups,
sel.Gene = "all",
col.groups = colors.for.groups,
colors = colors,
show.colnames = FALSE,
show.rownames = TRUE,
fontsize = 11,
fontsize.row = 11,
cellwidth = 4)
results_heatmap(data.dCtF.3groups,
sel.Gene = "all",
col.groups = colors.for.groups,
colors = colors,
show.colnames = FALSE,
show.rownames = TRUE,
fontsize = 11,
fontsize.row = 11,
cellwidth = 3)
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
legend.position = "top")
?pca_kmeans
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 3,
clust.names = c("Cluster1", "Cluster2", "Cluster3"),
point.shape = c(19, 17, 21),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 3,
clust.names = c("Cluster1", "Cluster2", "Cluster3"),
point.shape = c(19, 17, 18),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
# Access to the confusion matrix:
pca.kmeans[[2]]
pca.kmeans[[1]] + theme(legend.box = "vertical")
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 2,
clust.names = c("Cluster1", "Cluster2", "Cluster3"),
point.shape = c(19, 17, 18),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
# Access to the confusion matrix:
pca.kmeans[[2]]
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 2,
clust.names = c("Cluster1", "Cluster2"),
point.shape = c(19, 17, 18),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
# Access to the confusion matrix:
pca.kmeans[[2]]
pca.kmeans <- pca_kmeans(data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
k.clust = 2,
clust.names = c("Cluster1", "Cluster2", "Cluster3"),
point.shape = c(19, 17),
point.color = c("#66c2a5", "#fc8d62", "#8DA0CB"),
legend.position = "top")
library(Hmisc)
library(corrplot)
# To make the plot more readable, only part of the data was used:
corr.samples <- corr_sample(data = data.dCtF.3groups[15:30, ],
method = "pearson",
order = "hclust",
size = 0.7,
p.adjust.method = "BH")
corr.genes <- corr_gene(data = data.dCtF.3groups,
method = "spearman",
order = "FPC",
size = 0.7,
p.adjust.method = "BH")
AAA6_AAA43 <- single_pair_sample(data = data.dCtF.3groups,
x = "AAA6",
y = "AAA43",
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = 0.05)
library(ggpmisc)
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = TRUE,
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95))
?single_pair_gene
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = FALSE,
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95))
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = TRUE,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"),
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95))
PDGFB_TGFB <- single_pair_gene(data.dCtF.3groups,
x = "PDGFB",
y = "TGFB",
by.group = TRUE,
colors = c("#66c2a5", "#fc8d62", "#8DA0CB"), # Vector of colors
point.size = 3,
labels = TRUE,
label = c("eq", "R2", "p"),
label.position.x = c(0.05),
label.position.y = c(1,0.95,0.9)) # Labels position
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to be sufficient to arrange panels:
roc_parameters <- ROCh(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
groups = c("AAA","Control","VV"),
panels.row = 2,
panels.col = 2)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to be sufficient to arrange panels:
roc_parameters <- ROCh(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
groups = c("Control","VV"),
panels.row = 2,
panels.col = 2)
roc_parameters
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to be sufficient to arrange panels:
roc_parameters <- ROCh(data = data.dCtF.3groups,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
groups = c("Control","VV"),
panels.row = 2,
panels.col = 2,
save.to.tiff = TRUE)
knitr::include_graphics("ROC_plot_3groups.png")
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCtF.3groups,
increment = 1,
sel.Gene = c("ANGPT1","VEGFB", "VEGFC"),
group.study = "VV",
group.ref = "Control")
log.reg.results[[2]]
str(data.Ct)
data.Ct
library(RQdeltaCT)
# Set path to file:
path <- system.file("extdata",
"data_Ct_long.txt",
package = "RQdeltaCT")
# Import file using path; remember to specify proper separator, decimal character, and numbers of necessary columns:
library(RQdeltaCT)
library(tidyverse)
data.Ct <- read_Ct_long(path = path,
sep = "\t",
dec = ".",
skip = 0,
add.column.Flag = TRUE,
column.Sample = 1,
column.Gene = 2,
column.Ct = 5,
column.Group = 9,
column.Flag = 4)
data.Ct
str(data.Ct)
data.Ct
data.Ct <- mutate(data.Ct,
Flag = ifelse(Flag < 1, "Undetermined", "OK"))
str(data.Ct)
data.Ct <- read_Ct_long(path = path,
sep = "\t",
dec = ".",
skip = 0,
add.column.Flag = TRUE,
column.Sample = 1,
column.Gene = 2,
column.Ct = 5,
column.Group = 9,
column.Flag = 4)
# Set path to file:
path <- system.file("extdata",
"data_Ct_long.txt",
package = "RQdeltaCT")
data.Ct <- read_Ct_long(path = path,
sep = "\t",
dec = ".",
skip = 0,
add.column.Flag = TRUE,
column.Sample = 1,
column.Gene = 2,
column.Ct = 5,
column.Group = 9,
column.Flag = 4)
data.Ct <- mutate(data.Ct,
Flag = ifelse(Flag < 1, "Undetermined", "OK"))
usethis::use_data(data.Ct)
usethis::use_data(data.Ct, overwrite = TRUE)
library(roxygen2)
roxygenise()
library(RQdeltaCT)
# Set paths to required files:
path.Ct.file <- system.file("extdata",
"data_Ct_wide.txt",
package = "RQdeltaCT")
# Set paths to required files:
path.Ct.file <- system.file("extdata",
"data_Ct_wide.txt",
package = "RQdeltaCT")
path.design.file <- system.file("extdata",
"data_design.txt",
package = "RQdeltaCT")
data.Ct <- read_Ct_wide(path.Ct.file = path.Ct.file,
path.design.file = path.design.file,
sep ="\t",
dec = ".")
# Look at the structure:
str(data.Ct)
library(RQdeltaCT)
# Set paths to required files:
path.Ct.file <- system.file("extdata",
"data_Ct_wide.txt",
package = "RQdeltaCT")
path.design.file <- system.file("extdata",
"data_design.txt",
package = "RQdeltaCT")
data.Ct <- read_Ct_wide(path.Ct.file = path.Ct.file,
path.design.file = path.design.file,
sep ="\t",
dec = ".")
# Look at the structure:
str(data.Ct)
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
str(data.Ct.wide)
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
str(data.Ct.wide)
library(RQdeltaCT)
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
str(data.Ct.wide)
# Import file, be aware to specify parameters that fit to imported data:
data.Ct.wide <- read.csv(file = "data/data.Ct.wide.vign.txt",
header = TRUE,
sep = ",")
str(data.Ct.wide)
# The imported table is now transformed to a long-format structure. The "X" column is unnecessary and is removed. All variables also are converted to a character to unify the class of variables.
library(tidyverse)
data.Ct <- data.Ct.wide %>%
select(-X) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Gene", values_to = "Ct")
str(data.Ct)
data(data.Ct)
str(data.Ct)
data(data.Ct.pairwise)
str(data.Ct.pairwise)
str(data.Ct)
str(data.Ct.pairwise)
sample.Ct.control <- control_Ct_barplot_sample(data = data.Ct,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 9,
axis.text.size = 7,
plot.title.size = 9,
legend.title.size = 9,
legend.text.size = 9)
gene.Ct.control <- control_Ct_barplot_gene(data = data.Ct,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
axis.title.size = 9,
axis.text.size = 9,
plot.title.size = 9,
legend.title.size = 9,
legend.text.size = 9)
