panels.col = 2,
save.to.tiff = TRUE,
height = 7,
print.auc.size = 0.5)
# Access to calculated parameters:
roc_parameters
library(pROC)
# Remember to specify the numbers of rows (panels.row parameter) and columns (panels.col parameter) to provide sufficient place to arrange panels:
roc_parameters <- ROCh(data = data.dCt.pairwise.F,
sel.Gene = c("Gene8","Gene19"),
groups = c("After","Before"),
panels.row = 1,
panels.col = 2,
save.to.tiff = TRUE,
height = 7,
print.auc.size = 0.6)
# Access to calculated parameters:
roc_parameters
data <- data.dCt.pairwise.F[, colnames(data.dCt.pairwise.F) %in% c("Group", "Sample", "Gene19")]
as.data.frame(data)$Gene19
data$Group
data_roc <- roc(response = data$Group,
predictor = as.data.frame(data)$Gene19,
levels = c("Before","After"),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE)
data_roc
?coords
parameters <- coords(myproc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters <- coords(data_roc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters
data_roc$auc
# Filter data:
data <- data.dCt.pairwise.F[, colnames(data.dCt.pairwise.F) %in% c("Group", "Sample", "Gene19")]
# Perform analysis:
data_roc <- roc(response = data$Group,
predictor = as.data.frame(data)$Gene19,
levels = c("Before","After"),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE)
# Gain parameters:
parameters <- coords(data_roc,
"best",
ret = c("threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"))
parameters
# Gain AUC
data_roc$auc
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before")
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 2,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = "mean",
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(oddsratio)
# Remember to set the increment parameter.
log.reg.results <- log_reg(data = data.dCt.pairwise.F,
increment = 1,
sel.Gene = c("Gene8","Gene19"),
group.study = "After",
group.ref = "Before",
log.axis = TRUE)
log.reg.results[[2]]
library(roxygen2)
roxygenise()
library(RQdeltaCT)
library(ctrlGene)
# Remember that the number of colors in col parameter should be equal to the number of tested genes:
ref.pairwise <- find_ref_gene(data = data.Ct.pairwiseF.ready,
groups = c("After","Before"),
candidates = c("Gene4","Gene13","Gene20"),
col = c("#66c2a5", "#fc8d62","#6A6599"),
angle = 30,
axis.text.size = 7,
norm.finder.score = TRUE,
genorm.score = TRUE)
library(roxygen2)
roxygenise()
library(RQdeltaCT)
#' @param width Numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height Numeric: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff Character: name of saved .tiff file, without ".tiff" name of extension. Default to "RQ_plot".
#'
#' @return List containing object with barplot and data frame with results. Created plot is also displayed on graphic device.
#' @export
#'
#' @examples
#' library(ggsignif)
#' library(tidyverse)
data(data.Ct)
library(tidyverse)
library(RQdeltaCT)
data.CtF <- filter_Ct(data.Ct,
remove.Gene = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
data.dCt.exp <- exp_Ct_dCt(data.dCt)
data.dCt.expF <- filter_transformed_data(data.dCt.exp, remove.Sample = c("Control11"))
RQ.dCt.exp <- RQ_exp_Ct_dCt(data.dCt.expF, "Disease", "Control")
RQ.dCt.exp
#'
#' @importFrom stats sd shapiro.test t.test p.adjust
#' @importFrom coin wilcox_test wilcoxsign_test pvalue statistic
#' @importFrom utils write.table
#' @importFrom dplyr filter select rename_with full_join group_by summarise mutate
#' @importFrom tidyr pivot_longer pivot_wider
#' @importFrom tidyselect all_of ends_with everything
#' @importFrom magrittr %>%
#' @import tidyverse
#'
RQ_exp_Ct_dCt <- function(data,
group.study,
group.ref,
do.tests = TRUE,
pairwise = FALSE,
alternative = "two.sided",
p.adjust.method = "BH",
save.to.txt = FALSE,
name.txt = "RQ_exp_results") {
data_slim <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(
cols = -c(Group, Sample),
names_to = "Gene",
values_to = "value"
)
data_mean <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value) %>%
rename_with(~ paste0(.x, "_mean", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_sd <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value_sd = sd(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value_sd) %>%
rename_with(~ paste0(.x, "_sd", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_mean_sd <- full_join(data_mean, data_sd, by = c("Gene"))
if (pairwise == FALSE) {
data_FCh <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value) %>%
mutate(FCh = .data[[group.study]] / .data[[group.ref]]) %>%
mutate(log10FCh = log10(FCh)) %>%
select(Gene, FCh, log10FCh)
} else {
data_FCh <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(
cols = -c(Group, Sample),
names_to = "Gene",
values_to = "value"
) %>%
pivot_wider(names_from = Group, values_from = value) %>%
mutate(FCh = .data[[group.study]] / .data[[group.ref]])
data_FCh_mean <- data_FCh %>%
group_by(Gene) %>%
summarise(FCh = mean(FCh, na.rm = TRUE), .groups = "keep") %>%
mutate(log10FCh = log10(FCh))
data_FCh_sd <- data_FCh %>%
group_by(Gene) %>%
summarise(FCh_sd = sd(FCh, na.rm = TRUE), .groups = "keep")
}
if (do.tests == TRUE) {
data_norm <- data_slim %>%
group_by(Group, Gene) %>%
summarise(shap_wilka_p = shapiro.test(value)$p.value,
.groups = "keep") %>%
pivot_wider(names_from = Group, values_from = shap_wilka_p) %>%
rename_with(~ paste0(.x, "_norm_p", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_mean_sd_norm <-
full_join(data_mean_sd, data_norm, by = c("Gene"))
data_slim$Group <- as.factor(data_slim$Group)
if (pairwise == FALSE) {
data_tests <- data_slim %>%
group_by(Gene) %>%
summarise(
t_test_p = t.test(value ~ Group, alternative = alternative)$p.value,
t_test_stat = t.test(value ~ Group, alternative = alternative)$statistic,
MW_test_p = coin::pvalue(wilcox_test(value ~ Group, alternative = alternative)),
MW_test_stat = coin::statistic(wilcox_test(value ~ Group, alternative = alternative)),
.groups = "keep"
)
} else {
data_tests <- data_slim %>%
pivot_wider(names_from = "Group", values_from = "value") %>%
group_by(Gene) %>%
summarise(
t_test_p = t.test(
.data[[group.study]],
.data[[group.ref]],
alternative = alternative,
paired = TRUE
)$p.value,
t_test_stat = t.test(
.data[[group.study]],
.data[[group.ref]],
alternative = alternative,
paired = TRUE
)$statistic,
MW_test_p = coin::pvalue(
wilcoxsign_test(.data[[group.study]] ~ .data[[group.ref]], alternative = alternative)
),
MW_test_stat = coin::statistic(
wilcoxsign_test(.data[[group.study]] ~ .data[[group.ref]], alternative = alternative)
),
.groups = "keep"
)
}
data_tests$t_test_p_adj <-
p.adjust(data_tests$t_test_p, method = p.adjust.method)
data_tests$MW_test_p_adj <-
p.adjust(data_tests$MW_test_p, method = p.adjust.method)
if (pairwise == TRUE) {
data_mean_sd_norm_FChmean <-
full_join(data_mean_sd_norm, data_FCh_mean, by = c("Gene"))
data_mean_sd_norm_FChmean_FChsd <-
full_join(data_mean_sd_norm_FChmean, data_FCh_sd, by = c("Gene"))
data_results <-
full_join(data_mean_sd_norm_FChmean_FChsd,
data_tests,
by = c("Gene"))
return(list(data_results, data_FCh))
} else {
data_mean_sd_FCh <-
full_join(data_mean_sd, data_FCh, by = c("Gene"))
data_results <-
full_join(data_mean_sd_FCh, data_tests, by = c("Gene"))
return(data_results)
}
} else {
if (pairwise == TRUE) {
data_mean_sd_FChmean <-
full_join(data_mean_sd, data_FCh_mean, by = c("Gene"))
data_results <-
full_join(data_mean_sd_FChmean, data_FCh_sd, by = c("Gene"))
return(list(data_results, data_FCh))
} else {
data_results <- full_join(data_mean_sd, data_FCh, by = c("Gene"))
return(data_results)
}
}
if (save.to.txt == TRUE) {
write.table(data_results, paste(name.txt, ".txt", sep = ""))
}
}
RQ.dCt.exp <- RQ_exp_Ct_dCt(data.dCt.expF, "Disease", "Control")
#' @param save.to.tiff Logical: if TRUE, plot will be saved as .tiff file. Default to FALSE.
#' @param dpi Integer: resolution of saved .tiff file. Default to 600.
#' @param width Numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height Numeric: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff Character: name of saved .tiff file, without ".tiff" name of extension. Default to "RQ_plot".
#'
#' @return List containing object with barplot and data frame with results. Created plot is also displayed on graphic device.
#' @export
#'
#' @examples
library(ggsignif)
#' @param save.to.tiff Logical: if TRUE, plot will be saved as .tiff file. Default to FALSE.
#' @param dpi Integer: resolution of saved .tiff file. Default to 600.
#' @param width Numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height Numeric: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff Character: name of saved .tiff file, without ".tiff" name of extension. Default to "RQ_plot".
#'
#' @return List containing object with barplot and data frame with results. Created plot is also displayed on graphic device.
#' @export
#'
#' @examples
library(coin)
RQ.dCt.exp <- RQ_exp_Ct_dCt(data.dCt.expF, "Disease", "Control")
RQ.dCt.exp
#'
RQ.volcano <- RQ_volcano(data = RQ.dCt.exp,
mode = "depends",
p.threshold = 0.05,
FCh.threshold = 2)
RQ.dCt.exp
#'
#' @importFrom stats sd shapiro.test t.test p.adjust
#' @importFrom coin wilcox_test wilcoxsign_test pvalue statistic
#' @importFrom utils write.table
#' @importFrom dplyr filter select rename_with full_join group_by summarise mutate
#' @importFrom tidyr pivot_longer pivot_wider
#' @importFrom tidyselect all_of ends_with everything
#' @importFrom magrittr %>%
#' @import tidyverse
#'
RQ_exp_Ct_dCt <- function(data,
group.study,
group.ref,
do.tests = TRUE,
pairwise = FALSE,
alternative = "two.sided",
p.adjust.method = "BH",
save.to.txt = FALSE,
name.txt = "RQ_exp_results") {
data_slim <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(
cols = -c(Group, Sample),
names_to = "Gene",
values_to = "value"
)
data_mean <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value) %>%
rename_with(~ paste0(.x, "_mean", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_sd <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value_sd = sd(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value_sd) %>%
rename_with(~ paste0(.x, "_sd", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_mean_sd <- full_join(data_mean, data_sd, by = c("Gene"))
if (pairwise == FALSE) {
data_FCh <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value) %>%
mutate(FCh = .data[[group.study]] / .data[[group.ref]]) %>%
mutate(log10FCh = log10(FCh)) %>%
select(Gene, FCh, log10FCh)
} else {
data_FCh <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(
cols = -c(Group, Sample),
names_to = "Gene",
values_to = "value"
) %>%
pivot_wider(names_from = Group, values_from = value) %>%
mutate(FCh = .data[[group.study]] / .data[[group.ref]])
data_FCh_mean <- data_FCh %>%
group_by(Gene) %>%
summarise(FCh = mean(FCh, na.rm = TRUE), .groups = "keep") %>%
mutate(log10FCh = log10(FCh))
data_FCh_sd <- data_FCh %>%
group_by(Gene) %>%
summarise(FCh_sd = sd(FCh, na.rm = TRUE), .groups = "keep")
}
if (do.tests == TRUE) {
data_norm <- data_slim %>%
group_by(Group, Gene) %>%
summarise(shap_wilka_p = shapiro.test(value)$p.value,
.groups = "keep") %>%
pivot_wider(names_from = Group, values_from = shap_wilka_p) %>%
rename_with(~ paste0(.x, "_norm_p", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_mean_sd_norm <-
full_join(data_mean_sd, data_norm, by = c("Gene"))
data_slim$Group <- as.factor(data_slim$Group)
if (pairwise == FALSE) {
data_tests <- data_slim %>%
group_by(Gene) %>%
summarise(
t_test_p = t.test(value ~ Group, alternative = alternative)$p.value,
t_test_stat = t.test(value ~ Group, alternative = alternative)$statistic,
MW_test_p = coin::pvalue(wilcox_test(value ~ Group, alternative = alternative)),
MW_test_stat = coin::statistic(wilcox_test(value ~ Group, alternative = alternative)),
.groups = "keep"
)
} else {
data_tests <- data_slim %>%
pivot_wider(names_from = "Group", values_from = "value") %>%
group_by(Gene) %>%
summarise(
t_test_p = t.test(
.data[[group.study]],
.data[[group.ref]],
alternative = alternative,
paired = TRUE
)$p.value,
t_test_stat = t.test(
.data[[group.study]],
.data[[group.ref]],
alternative = alternative,
paired = TRUE
)$statistic,
MW_test_p = coin::pvalue(
wilcoxsign_test(.data[[group.study]] ~ .data[[group.ref]], alternative = alternative)
),
MW_test_stat = coin::statistic(
wilcoxsign_test(.data[[group.study]] ~ .data[[group.ref]], alternative = alternative)
),
.groups = "keep"
)
}
data_tests$t_test_p_adj <-
p.adjust(data_tests$t_test_p, method = p.adjust.method)
data_tests$MW_test_p_adj <-
p.adjust(data_tests$MW_test_p, method = p.adjust.method)
if (pairwise == TRUE) {
data_mean_sd_norm_FChmean <-
full_join(data_mean_sd_norm, data_FCh_mean, by = c("Gene"))
data_mean_sd_norm_FChmean_FChsd <-
full_join(data_mean_sd_norm_FChmean, data_FCh_sd, by = c("Gene"))
data_results <-
full_join(data_mean_sd_norm_FChmean_FChsd,
data_tests,
by = c("Gene"))
return(list(data_results, data_FCh))
} else {
data_mean_sd_FCh <-
full_join(data_mean_sd_norm, data_FCh, by = c("Gene"))
data_results <-
full_join(data_mean_sd_FCh, data_tests, by = c("Gene"))
return(data_results)
}
} else {
if (pairwise == TRUE) {
data_mean_sd_FChmean <-
full_join(data_mean_sd, data_FCh_mean, by = c("Gene"))
data_results <-
full_join(data_mean_sd_FChmean, data_FCh_sd, by = c("Gene"))
return(list(data_results, data_FCh))
} else {
data_results <- full_join(data_mean_sd, data_FCh, by = c("Gene"))
return(data_results)
}
}
if (save.to.txt == TRUE) {
write.table(data_results, paste(name.txt, ".txt", sep = ""))
}
}
RQ.dCt.exp <- RQ_exp_Ct_dCt(data.dCt.expF, "Disease", "Control")
#'
RQ.volcano <- RQ_volcano(data = RQ.dCt.exp,
mode = "depends",
p.threshold = 0.05,
FCh.threshold = 2)
head(RQ.volcano[[2]])
library(roxygen2)
roxygenise()
roxygenise()
devtools::load_all(".")
library(RQdeltaCT)
roxygenise()
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
devtools::load_all(".")
library(RQdeltaCT)
library(RQdeltaCT)
