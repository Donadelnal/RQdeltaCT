plot.title = "",
plot.title.size = 14,
legend.title = "Reliable Ct value?",
legend.title.size = 11,
legend.text.size = 11,
legend.position = "top",
save.to.tiff = FALSE,
dpi = 600,
width = 15,
height = 15,
name.tiff = "Ct_control_barplot_for_samples") {
data$Ct[data$Ct == flag.Ct] <- 100
data$Ct <- as.numeric(data$Ct)
if (sum(colnames(data) %in% "Flag") > 0) {
data <-
mutate(data, Reliable = ifelse(Ct > maxCt |
Flag == flag, yes = "No",  no = "Yes"))
} else {
data <-
mutate(data, Reliable = ifelse(Ct > maxCt , yes = "No",  no = "Yes"))
}
bar <- as.data.frame(table(data$Reliable, data$Sample))
order <- arrange(filter(bar, Var1 == "Yes"), Freq)$Var2
cat(
"Returned table contains the numbers of Ct values labelled as reliable or not in each sample, as well as the fraction of unreliable Ct values in each sample.\n"
)
message(
"Returned table contains the numbers of Ct values labelled as reliable or not in each sample, as well as the fraction of unreliable Ct values in each sample.\n"
)
barplot.samples <-
ggplot(bar, aes(
x = reorder(Var2, desc(Freq)),
y = Freq,
fill = Var1
)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(breaks = c("Yes", "No"),
values = c("Yes" = colors[1], "No" = colors[2])) +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(fill = legend.title, title = plot.title) +
theme_classic() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour =
"black")) +
theme(legend.text = element_text(size = legend.text.size, colour = "black")) +
theme(plot.title = element_text(size = plot.title.size)) +
scale_x_discrete(limits = order)
print(barplot.samples)
if (save.to.tiff == TRUE) {
ggsave(
paste(name.tiff, ".tiff", sep = ""),
barplot.samples,
dpi = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
} else {
}
tab <- table(data$Reliable, data$Sample)
tab <- tab %>%
as.data.frame() %>%
pivot_wider(names_from = Var1, values_from = Freq) %>%
arrange(desc(No)) %>%
mutate(Not.reliable.fraction = No / (No + Yes)) %>%
rename(Sample = Var2,
Not.reliable = No,
Reliable = Yes)
return(list(barplot.samples, tab))
}
sample.Ct.control <- control_Ct_barplot_sample(data.Ct)
sample.Ct.control[[2]]
#'                       remove.Sample = c("Control08","Control16","Control22"))
#'data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#'head(data.CtF.ready)
#'
#' @importFrom utils write.table
#' @importFrom dplyr select summarise group_by mutate across
#' @importFrom tidyr pivot_wider
#' @importFrom tidyselect where
#' @import tidyverse
#'
make_Ct_ready <- function(data,
imput.by.mean.within.groups,
save.to.txt = FALSE,
name.txt = "Ct_ready") {
data <- data %>%
group_by(Group, Gene, Sample) %>%
summarise(mean = mean(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
data_wide <- data %>%
select(Group, Sample, Gene, mean) %>%
pivot_wider(names_from = Gene, values_from = mean)
nas <- sum(is.na(data_wide))
percentage <-
sum(is.na(data_wide)) / ((ncol(data_wide) - 2) * nrow(data_wide))
if (imput.by.mean.within.groups == TRUE) {
data_wide_imp <- data_wide %>%
group_by(Group) %>%
mutate(across(where(is.numeric), ~ replace(., is.na(.), mean(., na.rm = TRUE))))
message(
"The data contain",
nas,
"missing values that constitute",
round(percentage * 100, 5),
"percent of the total data.\n Missing values were imputed using means within compared groups.\n"
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide_imp),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide_imp)
} else {
cat(
"The data contain",
nas,
"missing values that constitute",
round(percentage * 100, 5),
"percent of the total data."
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide)
}
}
data.CtF <- filter_Ct(data.Ct,
remove.Gene = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#'                       remove.Sample = c("Control08","Control16","Control22"))
#'data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#'head(data.CtF.ready)
#'
#' @importFrom utils write.table
#' @importFrom dplyr select summarise group_by mutate across
#' @importFrom tidyr pivot_wider
#' @importFrom tidyselect where
#' @import tidyverse
#'
make_Ct_ready <- function(data,
imput.by.mean.within.groups,
save.to.txt = FALSE,
name.txt = "Ct_ready") {
data <- data %>%
group_by(Group, Gene, Sample) %>%
summarise(mean = mean(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
data_wide <- data %>%
select(Group, Sample, Gene, mean) %>%
pivot_wider(names_from = Gene, values_from = mean)
nas <- sum(is.na(data_wide))
percentage <-
sum(is.na(data_wide)) / ((ncol(data_wide) - 2) * nrow(data_wide))
if (imput.by.mean.within.groups == TRUE) {
data_wide_imp <- data_wide %>%
group_by(Group) %>%
mutate(across(where(is.numeric), ~ replace(., is.na(.), mean(., na.rm = TRUE))))
message(
"The data contain ",
nas,
" missing values that constitute ",
round(percentage * 100, 5),
" percent of the total data.\nMissing values were imputed using means within compared groups.\n"
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide_imp),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide_imp)
} else {
meassage(
"The data contain ",
nas,
" missing values that constitute ",
round(percentage * 100, 5),
" percent of the total data."
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide)
}
}
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
#'                       remove.Sample = c("Control08","Control16","Control22"))
#'data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#'head(data.CtF.ready)
#'
#' @importFrom utils write.table
#' @importFrom dplyr select summarise group_by mutate across
#' @importFrom tidyr pivot_wider
#' @importFrom tidyselect where
#' @import tidyverse
#'
make_Ct_ready <- function(data,
imput.by.mean.within.groups,
save.to.txt = FALSE,
name.txt = "Ct_ready") {
data <- data %>%
group_by(Group, Gene, Sample) %>%
summarise(mean = mean(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
data_wide <- data %>%
select(Group, Sample, Gene, mean) %>%
pivot_wider(names_from = Gene, values_from = mean)
nas <- sum(is.na(data_wide))
percentage <-
sum(is.na(data_wide)) / ((ncol(data_wide) - 2) * nrow(data_wide))
if (imput.by.mean.within.groups == TRUE) {
data_wide_imp <- data_wide %>%
group_by(Group) %>%
mutate(across(where(is.numeric), ~ replace(., is.na(.), mean(., na.rm = TRUE))))
message(
"The data contain ",
nas,
" missing values that constitute ",
round(percentage * 100, 5),
" percent of the total data.\nMissing values were imputed using means within compared groups.\n"
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide_imp),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide_imp)
} else {
message(
"The data contain ",
nas,
" missing values that constitute ",
round(percentage * 100, 5),
" percent of the total data."
)
if (save.to.txt == TRUE) {
write.table(as.data.frame(data_wide),
paste(name.txt, ".txt", sep = ""))
}
return(data_wide)
}
}
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
#'                        panels.row = 2,
#'                        panels.col = 2)
#'
#' @importFrom dplyr select filter
#' @importFrom utils write.table
#' @importFrom pROC roc coords plot.roc
#' @importFrom grDevices tiff dev.off
#' @importFrom graphics par
#' @import tidyverse
#'
ROCh <- function(data,
sel.Gene = "all",
groups,
panels.row,
panels.col,
text.size = 1.1,
print.auc = TRUE,
print.auc.size = 0.8,
save.to.tiff = FALSE,
dpi = 600,
width = 15,
height = 15,
name.tiff = "ROC_plot",
save.to.txt = FALSE,
name.txt = "ROC_results") {
data <- filter(data, Group %in% groups)
if (sel.Gene[1] != "all") {
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Gene)]
}
roc_param <- as.data.frame(matrix(nrow = ncol(data) - 2, ncol = 9))
colnames(roc_param) <-
c(
"Gene",
"Threshold",
"Specificity",
"Sensitivity",
"Accuracy",
"ppv",
"npv",
"youden",
"AUC"
)
roc_param$Gene <- colnames(data)[-c(1:2)]
for (x in 1:nrow(roc_param)) {
myproc <- roc(
response = data$Group,
predictor = as.data.frame(data)[, x + 2],
levels = c(groups),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE
)
parameters <- coords(
myproc,
"best",
ret = c(
"threshold",
"specificity",
"sensitivity",
"accuracy",
"ppv",
"npv",
"youden"
)
)
roc_param[x, 2:8] <- parameters
roc_param[x, 9] <- myproc$auc
roc_param[x, 1] <- colnames(data)[x + 2]
if (nrow(parameters) > 1) {
message(
'\nWarning: ',
colnames(data)[x + 2],
' has more than 1 threshold value for calculated Youden J statistic.\n'
)
} else {
}
}
if (save.to.tiff == TRUE) {
tiff(
paste(name.tiff, ".tiff", sep = ""),
res = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
par(mfrow = c(panels.row, panels.col))
for (x in 1:nrow(roc_param)) {
myproc <- roc(
response = data$Group,
predictor = as.data.frame(data)[, x + 2],
levels = c(groups),
smooth = FALSE,
auc = TRUE,
plot = FALSE,
ci = TRUE,
of = "auc",
quiet = TRUE
)
plot.roc(
myproc,
main = roc_param$Gene[x],
smooth = FALSE,
cex.axis = text.size,
cex.lab = text.size,
identity.lwd = 2,
plot = TRUE,
percent = TRUE,
print.auc = print.auc,
print.auc.x = 0.85,
print.auc.y = 0.1,
print.auc.cex = print.auc.size
)
}
dev.off()
}
if (save.to.txt == TRUE) {
write.table(roc_param, paste(name.txt, ".txt", sep = ""))
}
return(roc_param)
}
data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
data.dCt.exp <- exp_Ct_dCt(data.dCt)
data.dCt.expF <- filter_transformed_data(data.dCt.exp, remove.Sample = c("Control11"))
roc_parameters <- ROCh(data.dCt, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
library(pROC)
roc_parameters <- ROCh(data.dCt, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters
roc_parameters <- ROCh(data.dCt,
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
library(GGally)
data(data.Ct.pairwise)
data.CtF.pairwise <- filter_Ct(data = data.Ct.pairwise,
flag.Ct = "Undetermined",
maxCt = 35,
flag = c("Undetermined"),
remove.Gene = c("Gene9", "Gene2","Gene5", "Gene11","Gene1"))
data.CtF.ready.pairwise <- make_Ct_ready(data = data.CtF.pairwise,
imput.by.mean.within.groups = TRUE)
data.dCt.pairwise <- delta_Ct(data = data.CtF.ready.pairwise,
ref = "Gene4")
parallel.plot <- parallel_plot(data = data.dCt.pairwise,
sel.Gene = c("Gene8","Gene19"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = c(3,4),
sel.Gene = c("Gene8","Gene19"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = c(4,3),
sel.Gene = c("Gene8","Gene19"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = c(4,3),
sel.Gene = c("Gene8"))
parallel.plot <- parallel_plot(data = data.dCt.pairwise,
sel.Gene = c("Gene8"))
?ggparcoord
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = columns,
sel.Gene = c("Gene8"))
#' data(data.Ct.pairwise)
#' data.CtF.pairwise <- filter_Ct(data = data.Ct.pairwise,
#'                                flag.Ct = "Undetermined",
#'                                maxCt = 35,
#'                                flag = c("Undetermined"),
#'                                remove.Gene = c("Gene9", "Gene2","Gene5", "Gene11","Gene1"))
#' data.CtF.ready.pairwise <- make_Ct_ready(data = data.CtF.pairwise,
#'                                          imput.by.mean.within.groups = TRUE)
#' data.dCt.pairwise <- delta_Ct(data = data.CtF.ready.pairwise,
#'                               ref = "Gene4")
parallel.plot <- parallel_plot(data = data.dCt.pairwise,
sel.Gene = c("Gene8","Gene19"))
#' data(data.Ct.pairwise)
#' data.CtF.pairwise <- filter_Ct(data = data.Ct.pairwise,
#'                                flag.Ct = "Undetermined",
#'                                maxCt = 35,
#'                                flag = c("Undetermined"),
#'                                remove.Gene = c("Gene9", "Gene2","Gene5", "Gene11","Gene1"))
#' data.CtF.ready.pairwise <- make_Ct_ready(data = data.CtF.pairwise,
#'                                          imput.by.mean.within.groups = TRUE)
#' data.dCt.pairwise <- delta_Ct(data = data.CtF.ready.pairwise,
#'                               ref = "Gene4")
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = "skewness",
sel.Gene = c("Gene8","Gene19"))
#' data(data.Ct.pairwise)
#' data.CtF.pairwise <- filter_Ct(data = data.Ct.pairwise,
#'                                flag.Ct = "Undetermined",
#'                                maxCt = 35,
#'                                flag = c("Undetermined"),
#'                                remove.Gene = c("Gene9", "Gene2","Gene5", "Gene11","Gene1"))
#' data.CtF.ready.pairwise <- make_Ct_ready(data = data.CtF.pairwise,
#'                                          imput.by.mean.within.groups = TRUE)
#' data.dCt.pairwise <- delta_Ct(data = data.CtF.ready.pairwise,
#'                               ref = "Gene4")
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = "allClass",
sel.Gene = c("Gene8","Gene19"))
#' data(data.Ct.pairwise)
#' data.CtF.pairwise <- filter_Ct(data = data.Ct.pairwise,
#'                                flag.Ct = "Undetermined",
#'                                maxCt = 35,
#'                                flag = c("Undetermined"),
#'                                remove.Gene = c("Gene9", "Gene2","Gene5", "Gene11","Gene1"))
#' data.CtF.ready.pairwise <- make_Ct_ready(data = data.CtF.pairwise,
#'                                          imput.by.mean.within.groups = TRUE)
#' data.dCt.pairwise <- delta_Ct(data = data.CtF.ready.pairwise,
#'                               ref = "Gene4")
parallel.plot <- parallel_plot(data = data.dCt.pairwise, order = "Outlying",
sel.Gene = c("Gene8","Gene19"))
?tempdir
tempdir()
oldpar <- par(no.readonly = TRUE)
oldpar
#' library(tidyverse)
#' library(pROC)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Gene = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' data.dCt.exp <- exp_Ct_dCt(data.dCt)
#' data.dCt.expF <- filter_transformed_data(data.dCt.exp, remove.Sample = c("Control11"))
roc_parameters <- ROCh(data.dCt, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
par()
?on.exit?
?on.exit
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(roxygen2)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
library(roxygen2)
library(roxygen2)roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(RQdeltaCT)
?as.data.frame
