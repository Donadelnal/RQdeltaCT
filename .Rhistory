data.CtF.ready
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
data.Ct.exp <- exp_Ct_dCt(data.CtF.ready)
RQ.Ct.exp <- RQ_exp_Ct_dCt(data.Ct.exp, do.tests = TRUE, group.study = "Disease", group.ref = "Control")
data.Ct.exp <- exp_Ct_dCt(data.CtF.ready)
librray(coin)
data.Ct.exp <- exp_Ct_dCt(data.CtF.ready)
library(coin)
RQ.Ct.exp <- RQ_exp_Ct_dCt(data.Ct.exp, do.tests = TRUE, group.study = "Disease", group.ref = "Control")
head(RQ.Ct.exp)
data.Ct.exp <- exp_Ct_dCt(data.CtF.ready)
library(coin)
RQ.Ct.exp <- RQ_exp_Ct_dCt(data.Ct.exp, do.tests = TRUE, group.study = "Disease", group.ref = "Control")
head(as.data.frame(RQ.Ct.exp))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
head(as.data.frame(data.CtF.ready))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
head(as.data.frame(data.CtF.ready))
as.data.frame(data.CtF.ready)
as.data.frame(data.CtF.ready)[9:14,]
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
as.data.frame(data.CtF.ready)[9:14,]
as.data.frame(data.CtF.ready)[14:19,]
as.data.frame(data.CtF.ready)[14:25,]
as.data.frame(data.CtF.ready)[14:35,]
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 45)
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 60)
# Without imputation:
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
as.data.frame(data.CtF.ready)[19:25,]
# With imputation:
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
as.data.frame(data.CtF.ready)[19:25,]
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 60)
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 60)
ref[[2]]
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 60,
axis.text.size = 8)
ref[[2]]
data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
data.dCt.exp <- exp_Ct_dCt(data.dCt)
library(coin)
RQ.dCt.exp <- RQ_exp_Ct_dCt(data.dCt.exp, do.tests = TRUE, group.study = "Disease", group.ref = "Control")
head(as.data.frame(RQ.dCt.exp))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
library(car)
ref <- select_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
angle = 60,
axis.text.size = 8)
ref[[2]]
# Without imputation:
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = FALSE)
as.data.frame(data.CtF.ready)[19:25,]
# With imputation:
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
as.data.frame(data.CtF.ready)[19:25,]
data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
library(coin)
RQ.ddCt <- RQ_ddCt(data.dCt, "Disease", "Control")
head(as.data.frame(RQ.ddCt))
control_boxplot_sample(data.dCt)
library(tidyverse)
library(RQdeltaCT
)
library(RQdeltaCT)
control_boxplot_sample(data.dCt)
control_boxplot_target(data.dCt)
control_boxplot_sample <- control_boxplot_sample(data.dCt)
control_boxplot_target <- control_boxplot_target(data.dCt)
library(tidyverse)
library(RQdeltaCT)
#' @export
#'
#' @examples
#' library(tidyverse)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
control_cluster_sample(data.dCt)
#'
#' @importFrom stats hclust dist
#' @importFrom base plot
#' @importFrom dplyr select
#' @import tidyverse
#'
control_cluster_sample <- function(data,
method.dist = "euclidean",
method.clust = "average",
x.axis.title = "Samples",
y.axis.title = "Height",
plot.title = "",
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_clust_samples"){
data <- ungroup(data)
cluster <- hclust(dist(select(data, -Group, -Sample), method = method.dist), method = method.clust)
cluster$labels <- data$Sample
plot(cluster, xlab = x.axis.title, ylab = y.axis.title, main = plot.title, cex = 6)
if (save.to.tiff == TRUE){
tiff(paste(name.tiff, ".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
plot(cluster, xlab  = x.axis.title, ylab = y.axis.title, main = plot.title)
dev.off()
}
}
#' @export
#'
#' @examples
#' library(tidyverse)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
control_cluster_sample(data.dCt)
#'
#' @importFrom stats hclust dist
#' @importFrom base plot
#' @importFrom dplyr select
#' @import tidyverse
#'
control_cluster_sample <- function(data,
method.dist = "euclidean",
method.clust = "average",
x.axis.title = "Samples",
y.axis.title = "Height",
plot.title = "",
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_clust_samples"){
data <- ungroup(data)
cluster <- hclust(dist(select(data, -Group, -Sample), method = method.dist), method = method.clust)
cluster$labels <- data$Sample
plot(cluster, xlab = x.axis.title, ylab = y.axis.title, main = plot.title, cex = 0.6)
if (save.to.tiff == TRUE){
tiff(paste(name.tiff, ".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
plot(cluster, xlab  = x.axis.title, ylab = y.axis.title, main = plot.title)
dev.off()
}
}
#' @export
#'
#' @examples
#' library(tidyverse)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
control_cluster_sample(data.dCt)
control_cluster_sample(data.dCt)
control_cluster_target(data.dCt)
control_cluster_sample(data.dCt. cex = 0.8)
control_cluster_sample(data.dCt, cex = 0.8)
control_cluster_sample(data.dCt, label.size = 0.8)
control_cluster_sample(data.dCt)
control_cluster_target(data.dCt)
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_target(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round t colnames
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_target <- function(data, point.size = 4, point.shape = 19, alpha = 0.7,
label.size = 3, hjust = 0, vjust = -1,
color = "black",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Group",
legend.title.size = 12,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_targets"){
data <- ungroup(data)
data <- as.data.frame(data)
data_t <- t(select(data, -Group, -Sample))
colnames(data_t) <- data$Sample
data_t <- na.omit(data_t)
pca <- prcomp(data_t)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Target <- rownames(pca_comp)
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Target)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha, col = color) +
labs(title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Target), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
control_pca_target(data.dCt)
?scale
?prcomp
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_target(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round t colnames
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_target <- function(data, point.size = 4, point.shape = 19, alpha = 0.7,
label.size = 3, hjust = 0, vjust = -1,
color = "black",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Group",
legend.title.size = 12,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_targets"){
data <- ungroup(data)
data <- as.data.frame(data)
data_t <- t(select(data, -Group, -Sample))
colnames(data_t) <- data$Sample
data_t <- na.omit(data_t)
pca <- prcomp(data = data_t, scale = TRUE)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Target <- rownames(pca_comp)
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Target)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha, col = color) +
labs(title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Target), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
control_pca_target(data.dCt)
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_target(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round t colnames
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_target <- function(data, point.size = 4, point.shape = 19, alpha = 0.7,
label.size = 3, hjust = 0, vjust = -1,
color = "black",
axis.title.size = 12,
axis.text.size = 10,
legend.text.size = 12,
legend.title = "Group",
legend.title.size = 12,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_targets"){
data <- ungroup(data)
data <- as.data.frame(data)
data_t <- t(select(data, -Group, -Sample))
colnames(data_t) <- data$Sample
data_t <- na.omit(data_t)
pca <- prcomp(data_t, scale = TRUE)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Target <- rownames(pca_comp)
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Target)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha, col = color) +
labs(title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Target), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
control_pca_target(data.dCt)
control_pca_sample(data.dCt)
control_pca_target(data.dCt)
control_pca_sample(data.dCt)
control_pca_target(data.dCt)
control.pca.sample <- control_pca_sample(data.dCt)
control.pca.target <- control_pca_target(data.dCt)
data.dCtF <- filter_transformed_data(data.dCt, remove.Sample = c("Control11"))
RQ.plot <- RQ_plot(RQ.ddCt, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
# with user p values - in this example used p values are calculated using stats::wilcox.test() function:
user <- data.dCt %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
group_by(Target) %>%
summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
RQ.plot <- RQ_plot(RQ.ddCt, mode = "t", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
# With user p values - in this example used p values are calculated using stats::wilcox.test() function:
user <- data.dCt %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
group_by(Target) %>%
summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
# The stats::wilcox.test() functions is limited to cases without ties, therefore a warning "cannot compute exact p-value with ties" could appear.
RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
RQ.plot <- RQ_plot(RQ.ddCt, mode = "mw", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
# With user p values - in this example used p values are calculated using stats::wilcox.test() function:
user <- data.dCt %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
group_by(Target) %>%
summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
# The stats::wilcox.test() functions is limited to cases without ties, therefore a warning "cannot compute exact p-value with ties" could appear.
RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
RQ.plot <- RQ_plot(RQ.ddCt, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
# With user p values - in this example used p values are calculated using stats::wilcox.test() function:
user <- data.dCt %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
group_by(Target) %>%
summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
# The stats::wilcox.test() functions is limited to cases without ties, therefore a warning "cannot compute exact p-value with ties" could appear.
RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
results_boxplot(data.dCt.expF,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
facet.row = 2,
facet.col = 2,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.dCtF,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
facet.row = 2,
facet.col = 2,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.dCtF,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
facet.row = 2,
facet.col = 2,
y.axis.title = dCt)
final_boxplot <- results_boxplot(data.dCtF,
sel.Target = c("Gene1","Gene16","Gene19","Gene20"),
facet.row = 2,
facet.col = 2,
y.axis.title = "dCt")
RQ.plot <- RQ_plot(RQ.ddCt, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
library(tidyverse)
library(RQdeltaCT)
RQ.plot <- RQ_plot(RQ.ddCt, mode = "depends", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
# With user p values - in this example used p values are calculated using stats::wilcox.test() function:
user <- data.dCt %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
group_by(Target) %>%
summarise(MW_test_p = wilcox.test(dCt ~ Group)$p.value, .groups = "keep")
# The stats::wilcox.test() functions is limited to cases without ties; therefore, a warning "cannot compute exact p-value with ties" could appear.
RQ.plot <- RQ_plot(RQ.ddCt, mode = "user", use.log10FCh = TRUE, log10FCh.threshold = 0.30103)
head(RQ.plot[[2]])
final_boxplot <- results_boxplot(data.dCtF,
sel.Target = c("Gene1","Gene12", "Gene16","Gene19","Gene20"),
facet.row = 3,
facet.col = 2,
y.axis.title = "dCt")
final_boxplot <- results_boxplot(data.dCtF,
sel.Target = c("Gene1","Gene12", "Gene16","Gene19"),
facet.row = 2,
facet.col = 2,
y.axis.title = "dCt")
library(tidyverse)
library(RQdeltaCT)
corr.samples <- corr_sample(data.dCtF)
library(Hmisc)
library(corrplot)
corr.samples <- corr_sample(data.dCtF)
data.dCt
library(Hmisc)
library(corrplot)
corr.targets <- corr_target(data.dCt)
library(Hmisc)
library(corrplot)
corr.targets <- corr_target(data.dCt,
order = "FPC")
corr.samples
library(ggpmisc)
?stat_poly_eq
Disease6_Control17 <- single_pair_sample(data.dCt, "Disease6", "Control17")
Disease6_Control17 <- single_pair_sample(data.dCt, "Disease6", "Control17", label.position.x = 0)
Disease6_Control17 <- single_pair_sample(data.dCt, "Disease6", "Control17", label.position.x = 0.1)
Disease6_Control17 <- single_pair_sample(data.dCt, "Disease6", "Control17", label.position.x = 0.05)
Gene16_Gene17 <- single_pair_target(data.dCt, "Gene16", "Gene17")
Gene16_Gene17 <- single_pair_target(data.dCt,
x = "Gene16",
y = "Gene17",
label.position.x = c(0.05),
label.position.y = c(1,0.95))
library(tidyverse)
library(RQdeltaCT)
library(pROC)
library(pROC)
roc_parameters <- ROCh(data.dCt, sel.Target = c("Gene1","Gene12","Gene16","Gene19"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters
roc_parameters <- ROCh(data.dCt, sel.Target = c("Gene1","Gene12","Gene16","Gene19"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2, save.to.tiff = TRUE)
library(here)
knitr::include_graphics(file.path(here::here(),"vignettes", "figure", "ROC_plot.png"))
?single_pair_sample
?single_pair_target
library(oddsratio)
log.reg.results <- log_reg(data.dCt,
sel.Target = c("Gene1","Gene12","Gene16","Gene19"),
group.study = "Disease",
group.ref = "Control")
log.reg.results[[2]]
log.reg.results[2]
log.reg.results
library(oddsratio)
log.reg.results <- log_reg(data.dCt,
sel.Target = c("Gene1","Gene12","Gene16","Gene19"),
group.study = "Disease",
group.ref = "Control")
log.reg.results[[2]]
sessionInfo()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
rlang::last_trace()
rlang::last_trace()
roxygenise()
library(RQdeltaCT)
