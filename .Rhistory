manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(y.exp.low, y.exp.up)))
}
if (faceting == TRUE) {
box_results <- box_results +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
facet_wrap(vars(Gene), scales = "free", nrow = facet.row, ncol = facet.col)
}
} else {
box_results <- ggplot(data, aes(x = Gene, y = value)) +
geom_boxplot(coef = coef, fill = colors[1]) +
labs(title = plot.title)
if (faceting == TRUE) {
box_results <- box_results +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
facet_wrap(vars(Gene), scales = "free", nrow = facet.row, ncol = facet.col)
}
}
box_results <- box_results +
guides(x =  guide_axis(angle = angle)) +
xlab(x.axis.title) +
ylab(y.axis.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
theme(panel.grid.major.x = element_blank())
if (rotate == TRUE){
box_results <- box_results +
coord_flip()
}
if (add.mean == TRUE & by.group == TRUE){
box_results <- box_results +
stat_summary(aes(group = Group),
fun = mean,
position = position_dodge(width = .75),
geom = "point",
shape = 15,
size = add.mean.size,
color = add.mean.color)
}
if (add.mean == TRUE & by.group == FALSE){
box_results <- box_results +
stat_summary(fun = mean,
position = position_dodge(width = .75),
geom = "point",
shape = 15,
size = add.mean.size,
color = add.mean.color)
}
print(box_results)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), box_results, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(box_results)
}
results_boxplot(data.Ct.exp.imp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.3g.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.imp.3g,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.imp.3g, colors = c("#66c2a5", "#fc8d62","red"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.imp.2s, colors = c("#66c2a5", "#fc8d62","red"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_boxplot(data.Ct.exp.imp.1s, colors = c("#66c2a5", "#fc8d62","red"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.ready.imp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.ready.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.3g.ready.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.3g.ready.noimp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.2s.ready.noimp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.2s.ready.imp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.s.ready.imp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
results_barplot(data.CtF.1s.ready.imp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
data.CtF.1s.ready.imp
results_barplot(data.CtF.1s.ready.imp, colors = c("#66c2a5", "#fc8d62","blue"),
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
signif.labels = c("****","*","***"," * "),
angle = 30,
signif.dist = 1.05,
faceting = FALSE,
facet.row = 1,
facet.col = 4,
y.exp.up = 0.1,
y.axis.title = bquote(~2^-dCt))
sd(5,2)
?sd
sd(c(5,2))
#'                        groups = c("Disease","Control"),
#'                        panels.row = 2,
#'                        panels.col = 2)
#'
#' @importFrom base plot colnames as.data.frame ncol matrix
#' @importFrom dplyr select filter
#' @importFrom utils write.table
#' @import tidyverse
#' @import pROC
#'
ROCh <- function(data,
sel.Gene = "all",
groups,
panels.row,
panels.col,
text.size = 1.1,
print.auc = TRUE,
print.auc.size = 0.8,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "ROC_plot",
save.to.txt = FALSE,
name.txt = "ROC_results"){
data <- filter(data, Group %in% groups)
if (sel.Gene[1] != "all"){
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Gene)]
}
roc_param <- as.data.frame(matrix(nrow = ncol(data)-2, ncol = 9))
colnames(roc_param) <- c("Gene","Threshold", "Specificity", "Sensitivity", "Accuracy", "ppv", "npv", "youden", "AUC")
roc_param$Gene <- colnames(data)[-c(1:2)]
for (x in 1:nrow(roc_param)){
myproc <- roc(response = data$Group, predictor = as.data.frame(data)[ ,x+2], levels = c(groups),
smooth = FALSE, auc = TRUE, plot=FALSE, ci=TRUE, of = "auc", quiet = TRUE)
parameters <- coords(myproc, "best", ret = c("threshold", "specificity", "sensitivity","accuracy", "ppv", "npv", "youden"))
roc_param[x,2:8] <- parameters
roc_param[x,9] <- myproc$auc
roc_param[x,1] <- colnames(data)[x+2]
if (nrow(parameters) > 1){
cat('Warning: ',colnames(data)[x+2],'has more than 1 threshold value for calculated Youdenâ€™s J statistic.\n')
} else {}
}
if (save.to.tiff == TRUE){
tiff(paste(name.tiff,".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
par(mfrow = c(panels.row, panels.col))
for (x in 1:nrow(roc_param)){
myproc <- roc(response = data$Group, predictor = as.data.frame(data)[ ,x+2], levels = c(groups),
smooth = FALSE, auc = TRUE, plot=FALSE, ci=TRUE, of = "auc", quiet = TRUE)
plot.roc(myproc, main = roc_param$Gene[x],
smooth = FALSE, cex.axis = text.size, cex.lab = text.size, identity.lwd = 2,
plot = TRUE, percent = TRUE, print.auc = print.auc, print.auc.x = 0.85, print.auc.y = 0.1, print.auc.cex = print.auc.size)
}
dev.off()
}
if (save.to.txt == TRUE){
write.table(roc_param, paste(name.txt,".txt", sep = ""))
}
return(roc_param)
}
roc_parameters <- ROCh(data.CtF.ready.imp, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters
roc_parameters <- ROCh(data.CtF.3g.ready.imp, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters
roc_parameters <- ROCh(data.CtF.3g.ready.noimp, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters
roc_parameters <- ROCh(data.CtF.2s.ready.noimp, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
roc_parameters <- ROCh(data.CtF.2s.ready.imp, sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
groups = c("Disease","Control"),
panels.row = 2,
panels.col = 2)
log.reg.results <- log_reg(data.Ct.exp.imp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results <- log_reg(data.Ct.exp.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results <- log_reg(data.Ct.3g.exp.noimp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results <- log_reg(data.Ct.exp.noimp.3g,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results
log.reg.results <- log_reg(data.Ct.exp.noimp.2s,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results
log.reg.results <- log_reg(data.Ct.exp.imp.2s,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results
log.reg.results <- log_reg(data.Ct.exp.imp,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
log.reg.results
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("Gene1","Gene16","Gene19","Gene20"),
group.study = "Disease",
group.ref = "Control")
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ctrlGene
#' @import ggplot2
#' @import tidyverse
#'
find_ref_gene <- function(data,
groups,
candidates,
colors,
vif.score = FALSE,
norm.finder.score = FALSE,
genorm.score = FALSE,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 11,
axis.text.size = 10,
legend.title = "",
legend.title.size = 11,
legend.text.size = 11,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
#filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Gene", values_to = "Ct") %>%
filter(Gene %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Gene, group = Gene)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
guides(x =  guide_axis(angle = angle)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Gene) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
if (vif.score == TRUE){
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- sample(1:nrow(ref_lm), nrow(ref_lm), replace = FALSE)
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model2)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
}
if (norm.finder.score == TRUE){
reference.stability.nF <- norm_finder(data, candidates = candidates)
colnames(reference.stability.nF) <- "NormFinder_score"
reference.stability.nF$Gene <- rownames(reference.stability.nF)
ref_var <- ref_var %>%
full_join(reference.stability.nF, by = join_by(Gene))
}
if (genorm.score == TRUE){
data <- data %>%
ungroup() %>%
select(-Group) %>%
select(any_of(c("Sample", candidates))) %>%
as.data.frame()
rownames(data) <- data[,"Sample"]
data <- select(data, -Sample)
data <- as.matrix(data)
reference.stability.gF <- geNorm(data,
genes = data.frame(Gene = character(0), geNorm_score = numeric(0)),
ctVal = TRUE)
colnames(reference.stability.gF) <- c("Gene", "geNorm_score")
ref_var <- ref_var %>%
full_join(reference.stability.gF, by = join_by(Gene))
}
return(list(ref_plot, as.data.frame(ref_var)))
}
ref <- find_ref_gene(data.CtF.ready,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
vif.score = TRUE,
norm.finder.score = TRUE,
genorm.score = TRUE)
ref <- find_ref_gene(data.CtF.ready.imp,
groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"),
vif.score = TRUE,
norm.finder.score = TRUE,
genorm.score = TRUE)
ref
library(roxygen2)
roxygenise()
roxygenise()
rlang::last_trace()
#' RQ.Ct.exp <- RQ_exp_Ct_dCt(data.Ct.exp, group.study = "Disease", group.ref = "Control")
#' head(RQ.Ct.exp)
#'
#' @importFrom base as.data.frame as.factor mean
#' @importFrom stats sd shapiro.test t.test
#' @importFrom coin wilcox_test pvalue statistic
#' @importFrom utils write.table
#' @importFrom dplyr filter select rename_with full_join
#' @import tidyverse
#'
RQ_exp_Ct_dCt <- function(data,
group.study,
group.ref,
do.tests = TRUE,
save.to.txt = FALSE,
name.txt = "RQ_exp_results"){
data_slim <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Gene", values_to = "value")
data_slim$Group <- as.factor(data_slim$Group)
data_FCh <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value = mean(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value) %>%
mutate(FCh = .data[[group.study]]/.data[[group.ref]]) %>%
as.data.frame()
data_FCh_sd <- data_slim %>%
group_by(Group, Gene) %>%
summarise(value_sd = sd(value, na.rm = TRUE), .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = value_sd) %>%
rename_with(~paste0(.x, "_sd", recycle0 = TRUE), all_of(c(group.study, group.ref)))
if (do.tests == TRUE){
data_FCh_norm <- data_slim %>%
group_by(Group, Gene) %>%
summarise(shap_wilka_p = shapiro.test(value)$p.value, .groups = "keep") %>%
pivot_wider(names_from = Group, values_from = shap_wilka_p) %>%
rename_with(~paste0(.x, "_norm_p", recycle0 = TRUE), all_of(c(group.study, group.ref))) %>%
full_join(data_FCh, by = c("Gene")) %>%
rename_with(~paste0(.x, "_mean", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_FCh_tests <- data_slim %>%
group_by(Gene) %>%
summarise(t_test_p = t.test(value ~ Group, alternative = "two.sided")$p.value,
t_test_stat = t.test(value ~ Group, alternative = "two.sided")$statistic,
MW_test_p = pvalue(wilcox_test(value ~ Group)),
MW_test_stat = statistic(wilcox_test(value ~ Group)), .groups = "keep")
data_FCh_norm_tests <- full_join(data_FCh_norm, data_FCh_tests, by = c("Gene"))
data_FCh_results <- full_join(data_FCh_norm_tests, data_FCh_sd, by = c("Gene"))
data_FCh_results <- select(data_FCh_results, Gene, ends_with("_mean"), ends_with("_sd"), everything())
return(data_FCh_results)
} else {
data_FCh_results <- full_join(data_FCh, data_FCh_sd, by = c("Gene"))
data_FCh_results <- rename_with(data_FCh_results, ~paste0(.x, "_mean", recycle0 = TRUE), all_of(c(group.study, group.ref)))
data_FCh_results <- select(data_FCh_results, Gene, ends_with("_mean"), ends_with("_sd"), everything())
return(data_FCh_results)
}
if (save.to.txt == TRUE){
write.table(data_FCh_results, paste(name.txt,".txt", sep = ""))
}
}
roxygenise()
roxygenise()
library(RQdeltaCT)
