method.dist = "euclidean",
method.clust = "average",
x.axis.title = "Samples",
y.axis.title = "Height",
label.size = 1,
plot.title = "",
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_clust_samples"){
if (sel.Sample[1] == "all"){
data <- data
} else {
data <- filter(data, Sample %in% sel.Sample)
}
data <- ungroup(data)
cluster <- hclust(dist(select(data, -Group, -Sample), method = method.dist), method = method.clust)
cluster$labels <- data$Sample
plot(cluster, xlab = x.axis.title, ylab = y.axis.title, main = plot.title, cex = label.size)
if (save.to.tiff == TRUE){
tiff(paste(name.tiff, ".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
plot(cluster, xlab  = x.axis.title, ylab = y.axis.title, main = plot.title, cex = label.size)
dev.off()
}
}
data.CtF <- filter_Ct(data.Ct,
library(RQdeltaCT)
data(data.Ct)
data.CtF <- filter_Ct(data.Ct,
remove.Gene = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
control_cluster_sample(data.dCt)
control_cluster_sample(data.dCt, sel.Sample = c("Gene1","Gene12","Gene16","Gene19"),
method.dist = "euclidean",
method.clust = "average",
label.size = 0.6)
data.dCt
#'
#' @importFrom stats hclust dist
#' @importFrom base plot
#' @importFrom dplyr select
#' @import tidyverse
#'
control_cluster_sample <- function(data,
sel.Gene = "all",
method.dist = "euclidean",
method.clust = "average",
x.axis.title = "Samples",
y.axis.title = "Height",
label.size = 1,
plot.title = "",
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_clust_samples"){
if (sel.Gene[1] == "all"){
data <- data
} else {
data <- select(data, Group, Sample, any_of(sel.Gene))
}
data <- ungroup(data)
cluster <- hclust(dist(select(data, -Group, -Sample), method = method.dist), method = method.clust)
cluster$labels <- data$Sample
plot(cluster, xlab = x.axis.title, ylab = y.axis.title, main = plot.title, cex = label.size)
if (save.to.tiff == TRUE){
tiff(paste(name.tiff, ".tiff", sep = ""), res = dpi, width = width, height = height, units = "cm", compression = "lzw")
plot(cluster, xlab  = x.axis.title, ylab = y.axis.title, main = plot.title, cex = label.size)
dev.off()
}
}
control_cluster_sample(data.dCt, sel.Sample = c("Gene1","Gene12","Gene16","Gene19"),
method.dist = "euclidean",
method.clust = "average",
label.size = 0.6)
control_cluster_sample(data.dCt, sel.Gene = c("Gene1","Gene12","Gene16","Gene19"),
method.dist = "euclidean",
method.clust = "average",
label.size = 0.6)
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_cluster_gene(data.dCt)
#'
#' @importFrom stats hclust dist
#' @importFrom base plot t colnames
#' @importFrom dplyr select
#' @import tidyverse
#'
control_cluster_gene <- function (data,
method.dist = "euclidean",
sel.Sample = "all",
method.clust = "average",
x.axis.title = "Genes",
y.axis.title = "Height",
label.size = 1,
plot.title = "",
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_clust_genes")
{
if (sel.Sample[1] == "all"){
data <- data
} else {
data <- filter(data, Sample %in% sel.Sample)
}
data_t <- ungroup(data)
data_t <- t(select(data_t, -Group, -Sample))
colnames(data_t) <- data$Sample
cluster <- hclust(dist(as.data.frame(data_t), method = method.dist), method = method.clust)
plot(cluster, xlab = x.axis.title, ylab = y.axis.title, main = plot.title, cex = label.size)
if (save.to.tiff == TRUE) {
tiff(paste(name.tiff, ".tiff", sep = ""), res = dpi,
width = width, height = height, units = "cm", compression = "lzw")
plot(cluster, xlab = x.axis.title, ylab = y.axis.title,
main = plot.title, cex = label.size)
dev.off()
}
}
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_sample(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_sample <- function(data,
sel.Gene = "all",
point.size = 4,
point.shape = 19,
alpha = 0.7,
colors = c("#66c2a5", "#fc8d62"),
label.size = 3,
hjust = 0,
vjust = -1,
axis.title.size = 11,
axis.text.size = 10,
legend.text.size = 11,
legend.title = "Group",
legend.title.size = 11,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_samples"){
if (sel.Gene[1] == "all"){
data <- data
} else {
data <- select(data, Group, Sample, any_of(sel.Gene))
}
data <- as.data.frame(data)
rownames(data) <- data$Sample
data <- na.omit(data)
pca <- prcomp(select(data, -Sample, -Group), scale = TRUE)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Sample <- data$Sample
pca_comp$Group <- data$Group
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Sample, color = Group)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha) +
scale_color_manual(values = c(colors)) +
labs(colour = legend.title, title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Sample), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_gene(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round t colnames
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_gene <- function(data,
sel.Sample = "all",
point.size = 4,
point.shape = 19,
alpha = 0.7,
label.size = 3, hjust = 0, vjust = -1,
color = "black",
axis.title.size = 11,
axis.text.size = 10,
legend.text.size = 11,
legend.title = "Group",
legend.title.size = 11,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_genes"){
if (sel.Sample[1] == "all"){
data <- data
} else {
data <- filter(data, Sample %in% sel.Sample)
}
data <- ungroup(data)
data <- as.data.frame(data)
data_t <- t(select(data, -Group, -Sample))
colnames(data_t) <- data$Sample
data_t <- na.omit(data_t)
pca <- prcomp(data_t, scale = TRUE)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Gene <- rownames(pca_comp)
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Gene)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha, col = color) +
labs(title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Gene), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
control.pca.sample <- control_pca_sample(data = data.dCt,
sel.Sample = c("Gene1","Gene12","Gene16","Gene19"),
point.size = 3,
label.size = 2.5,
legend.position = "top")
control_cluster_sample(data = data.dCt,
sel.Gene = c("Gene1","Gene12","Gene16","Gene19"),
method.dist = "euclidean",
method.clust = "average",
label.size = 0.6)
control.pca.sample <- control_pca_sample(data = data.dCt,
sel.Gene = c("Gene1","Gene12","Gene16","Gene19"),
point.size = 3,
label.size = 2.5,
legend.position = "top")
#'                       remove.Sample = c("Control08","Control16","Control22"))
#' data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
#' data.dCt <- delta_Ct(data.CtF.ready, ref = "Gene8")
#' control_pca_sample(data.dCt)
#'
#' @importFrom base print as.data.frame rownames summary paste round
#' @importFrom stats na.omit prcomp
#' @import ggplot2
#' @import tidyverse
#'
control_pca_sample <- function(data,
sel.Gene = "all",
point.size = 4,
point.shape = 19,
alpha = 0.7,
colors = c("#66c2a5", "#fc8d62"),
label.size = 3,
hjust = 0,
vjust = -1,
axis.title.size = 11,
axis.text.size = 10,
legend.text.size = 11,
legend.title = "Group",
legend.title.size = 11,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "control_pca_samples"){
if (sel.Gene[1] == "all"){
data <- data
} else {
data <- select(data, Group, Sample, any_of(sel.Gene))
}
data <- as.data.frame(data)
rownames(data) <- data$Sample
data <- na.omit(data)
pca <- prcomp(select(data, -Sample, -Group), scale = TRUE)
var_pca1 <- summary(pca)$importance[2,][1]
var_pca2 <- summary(pca)$importance[2,][2]
pca_comp <- as.data.frame(pca$x)
pca_comp$Sample <- data$Sample
pca_comp$Group <- data$Group
control_pca <- ggplot(pca_comp, aes(x = PC1, y = PC2, label = Sample, color = Group)) +
geom_point(size = point.size, shape = point.shape, alpha = alpha) +
scale_color_manual(values = c(colors)) +
labs(colour = legend.title, title = plot.title) +
theme_bw() +
labs(x = paste("PC1: ", round(var_pca1*100,2), "% variance explained", sep = ""),
y = paste("PC2: ", round(var_pca2*100,2), "% variance explained", sep = "")) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size)) +
geom_text(aes(label = Sample), hjust = hjust, vjust = vjust, size = label.size)
print(control_pca)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff,".tiff", sep = ""), control_pca, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
return(control_pca)
}
control.pca.sample <- control_pca_sample(data = data.dCt,
sel.Gene = c("Gene1","Gene12","Gene16","Gene19"),
point.size = 3,
label.size = 2.5,
legend.position = "top")
library(RQdeltaCT)
library(RQdeltaCT)
#' @param width numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height integer: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension.  Default to "Ct_control_barplot_for_genes".
#'
#' @return List containing plot and table with numbers of reliable and not reliable Ct values in genes.
#' Additional information about returned table is also printed, it could help user to properly interpret returned table.
#' Plot will be displayed on graphic device.
#' @export
#'
#' @examples
library(tidyverse)
data(data.Ct)
table(data.Ct$Sample)
table(data.Ct$Sample, data.Ct$Group)
table(data.Ct$Gene, data.Ct$Group)
?mutate
?pivot_longer
?ggplot
?reorder
?geom_bar
?pivot_wider
?rename
?%>%
?select
?any_of
?ggsave
?pivot_wider
?is.na
?group_by
?mutate
?across
?where
?replace
?write.table
?round
?function
cc
?mutate_at
?summarise
?rename_with
?all_of
?paste0
?ends_with
?everything
?rbind
?dim_desc
?dim
?matrix
?unlist
?factor
?levels
?length
?rep
?apply
?abs
?sqrt
?max
?cbind
?order
?sd
?var
?ungroup
?sample
?lm
?full_join
?vars
?list
?sub
?tiff
?t
?use_label
library(ggpmisc)
?use_label
?expansion
?stat_summary
?cat
?par
library(RQdeltaCT)
devtools::load_all()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
?globalVariables
roxygenise()
roxygenise()
remove.packages("RQdeltaCT")
library(roxygen2)
roxygenise()
warnings()
roxygenise()
warnings()
?vif
roxygenise()
roxygenise()
library(RQdeltaCT)
?vars
?var
roxygenise()
roxygenise()
library(RQdeltaCT)
roxygenise()
usethis::edit_r_environ()
roxygenise()
library(roxygen2)
roxygenise()
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
library(here)
knitr::include_graphics("ROC_plot.png")
knitr::include_graphics("figure1ok.png")
library(roxygen2)
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
#' library(oddsratio)
data(data.Ct)
data.CtF <- filter_Ct(data.Ct,
remove.Gene = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
remove.Sample = c("Control08","Control16","Control22"))
data.dCt <- delta_Ct(data.CtF,
ref = "Gene8")
data.CtF
data.CtF.ready <- make_Ct_ready(data.CtF, imput.by.mean.within.groups = TRUE)
data.dCt <- delta_Ct(data.CtF,
ref = "Gene8")
data.dCt <- delta_Ct(data.CtF.ready,
ref = "Gene8")
roxygenise()
roxygenise()
roxygenise()
library(RQdeltaCT)
usethis::edit_r_environ()
?desc
library(tidyverse)
?desc
?join_by
?glm
library(roxygen2)
roxygenise()
library(RQdeltaCT)
roxygenise()
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
?RQ_exp_Ct_dCt
?norm_finder
library(corrplot)
?corrplot
library(ggpmisc)
?stat_poly_eq
?filter_transformed_data
?results_boxplot
library(roxygen2)
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
?RQdeltaCT
?dplyr
library(RQdeltaCT)
?RQdeltaCT
usethis::use_citation()
?dplyr
?ggsignif
roxygenise()
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
?RQdeltaCT
??RQdeltaCT
roxygenise()
library(RQdeltaCT)
roxygenise()
library(RQdeltaCT)
library(RQdeltaCT)
