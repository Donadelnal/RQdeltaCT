data.CtF.prepared
Ct_for_control
ref_lm <- data.CtF.prepared %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
vif_sel
ref_lm <- data.CtF.prepared %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
vif_sel
Ct_for_control
data.CtF.prepared <- Ct_for_control(data.CtF, imput.by.mean.within.groups = FALSE)
ref_lm <- data.CtF.prepared %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
vif_sel
#'                         col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ggplot2
#' @import tidyverse
#'
select_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == group.study | Group == group.ref) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = mean, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (angle != 0){
ref_plot <- ref_plot +
guides(x =  guide_axis(angle = angle))
}
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(mean),
max = max(mean),
sd = sd(mean, na.rm = TRUE),
var = var(mean, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
return(list(ref_plot, ref_var))
}
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#'                         col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ggplot2
#' @import tidyverse
#'
select_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "dCt") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = mean, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (angle != 0){
ref_plot <- ref_plot +
guides(x =  guide_axis(angle = angle))
}
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(mean),
max = max(mean),
sd = sd(mean, na.rm = TRUE),
var = var(mean, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
return(list(ref_plot, ref_var))
}
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#'                         col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ggplot2
#' @import tidyverse
#'
select_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (angle != 0){
ref_plot <- ref_plot +
guides(x =  guide_axis(angle = angle))
}
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(mean),
max = max(mean),
sd = sd(mean, na.rm = TRUE),
var = var(mean, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
return(list(ref_plot, ref_var))
}
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#'                         col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ggplot2
#' @import tidyverse
#'
select_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (angle != 0){
ref_plot <- ref_plot +
guides(x =  guide_axis(angle = angle))
}
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
return(list(ref_plot, ref_var))
}
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
ref[[2]]
ref_lm <- data.CtF.prepared %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
vif_sel
ref_lm <- data.CtF.prepared %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel
vif_sel <- vif[names(vif) %in% candidates]
vif_sel
ref[[2]]
#'                         col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
#' ref[[2]]
#'
#' @importFrom base mean print min max as.data.frame
#' @importFrom stats sd var
#' @importFrom dplyr filter
#' @importFrom car vif
#' @import ggplot2
#' @import tidyverse
#'
select_ref_gene <- function(data,
groups,
candidates,
colors,
line.width = 1,
angle = 0,
x.axis.title = "",
y.axis.title = "Ct",
axis.title.size = 12,
axis.text.size = 10,
legend.title = "",
legend.title.size = 12,
legend.text.size = 12,
legend.position = "top",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600, width = 15, height = 15,
name.tiff = "Ct_reference_gene_selection"){
ref <- data %>%
filter(Group == groups[1] | Group == groups[2]) %>%
pivot_longer(cols = -c(Group, Sample), names_to = "Target", values_to = "Ct") %>%
filter(Target %in% candidates)
ref_plot <- ggplot(ref, aes(x = Sample, y = Ct, color = Target, group = Target)) +
geom_line(linewidth = line.width) +
scale_color_manual(values = c(colors)) +
theme_bw() +
xlab(x.axis.title) +
ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, color = 'black')) +
theme(axis.title = element_text(size = axis.title.size, color = 'black')) +
theme(legend.title = element_text(size = legend.title.size, colour="black")) +
theme(legend.text = element_text(size = legend.text.size, colour="black")) +
theme(plot.title = element_text(size = plot.title.size))
if (angle != 0){
ref_plot <- ref_plot +
guides(x =  guide_axis(angle = angle))
}
print(ref_plot)
if (save.to.tiff == TRUE){
ggsave(paste(name.tiff, ".tiff", sep = ""), ref_plot, dpi = dpi, width = width, height = height, units = "cm", compression = "lzw")
}
ref_var <- ref %>%
group_by(Target) %>%
summarise(min = min(Ct),
max = max(Ct),
sd = sd(Ct, na.rm = TRUE),
var = var(Ct, na.rm = TRUE), .groups = "keep") %>%
as.data.frame()
ref_lm <- data %>%
filter(Group %in% groups[1]) %>%
ungroup()
ref_lm$dum <- c(1:nrow(ref_lm))
model <- lm(dum ~ ., data = select(ref_lm, -Sample, -Group))
vif <- vif(model)
vif_sel <- vif[names(vif) %in% candidates]
ref_var$VIF <- vif_sel
colnames(ref_var)[colnames(ref_var) == "VIF"] = paste(groups[1], "_VIF", sep = "")
ref_lm2 <- data %>%
filter(Group %in% groups[2]) %>%
ungroup()
ref_lm2$dum <- c(1:nrow(ref_lm2))
model2 <- lm(dum ~ ., data = select(ref_lm2, -Sample, -Group))
vif2 <- vif(model2)
vif_sel2 <- vif2[names(vif2) %in% candidates]
ref_var$VIF2 <- vif_sel2
colnames(ref_var)[colnames(ref_var) == "VIF2"] = paste(groups[2], "_VIF", sep = "")
return(list(ref_plot, ref_var))
}
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
ref[[2]]
#'     Created plot is displayed on graphic device.
#' @export
#'
#' @examples
#' library(car)
#' library(tidyverse)
#' data(data.Ct)
#' data.CtF <- filter_Ct(data.Ct,
#'                       remove.Target = c("Gene2","Gene5","Gene6","Gene9","Gene11"),
#'                       remove.Sample = c("Control08","Control16","Control22"))
data.CtF.prepared <- Ct_for_control(data.CtF, imput.by.mean.within.groups = TRUE)
ref <-  select_ref_gene(data.CtF.prepared, groups = c("Disease","Control")
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
ref <- select_ref_gene(data.CtF.prepared, groups = c("Disease","Control"),
candidates = c("Gene4", "Gene8","Gene10","Gene16","Gene17", "Gene18"),
col = c("#66c2a5", "#fc8d62","#6A6599", "#D62728", "#1F77B4", "black"))
ref[[2]]
#' @param dpi integer: resolution of saved .tiff file. Default to 600.
#' @param width numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height integer: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "control_clust_samples".
#'
#' @return Plot with hierarchical clustering of samples, displayed on graphic device.
#' @export
#'
#' @examples
#' library(tidyverse)
librray(pROC)
#' @param dpi integer: resolution of saved .tiff file. Default to 600.
#' @param width numeric: width (in cm) of saved .tiff file. Default to 15.
#' @param height integer: height (in cm) of saved .tiff file. Default to 15.
#' @param name.tiff character: name of saved .tiff file, without ".tiff" name of extension. Default to "control_clust_samples".
#'
#' @return Plot with hierarchical clustering of samples, displayed on graphic device.
#' @export
#'
#' @examples
#' library(tidyverse)
library(pROC)
?roc.test
