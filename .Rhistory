#theme(legend.title = element_text(size = legend.title.size, colour =  "black")) +
theme(panel.grid.major.x = element_blank()) +
facet_wrap(vars(Gene), scales = "free", nrow = 1)
final_barplot_no_colors
final_barplot_no_colors <- ggplot(data.mean, aes(x = gene, y = mean)) +
geom_errorbar(aes(group = Group,
y = mean,
ymin = ifelse(mean < 0, mean - abs(sd), mean),
ymax = ifelse(mean > 0, mean + abs(sd), mean)),
width = .2,
position = position_dodge(0.9)) +
geom_col(aes(group = Group),
position = position_dodge(.9),
width = 0.5,
color = "black") +
#xlab(x.axis.title) +
#ylab(y.axis.title) +
theme_bw() +
#theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
#theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
#theme(legend.text = element_text(size = legend.text.size, colour ="black")) +
#theme(legend.title = element_text(size = legend.title.size, colour =  "black")) +
theme(panel.grid.major.x = element_blank()) +
facet_wrap(vars(gene), scales = "free", nrow = 1)
final_barplot_no_colors
final_barplot_no_colors <- ggplot(data.mean, aes(x = gene, y = mean)) +
geom_errorbar(aes(group = Group,
y = mean,
ymin = ifelse(mean < 0, mean - abs(sd), mean),
ymax = ifelse(mean > 0, mean + abs(sd), mean)),
width = .2,
position = position_dodge(0.9)) +
geom_col(aes(group = Group),
position = position_dodge(.9),
width = 0.7,
color = "black") +
#xlab(x.axis.title) +
#ylab(y.axis.title) +
theme_bw() +
#theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
#theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
#theme(legend.text = element_text(size = legend.text.size, colour ="black")) +
#theme(legend.title = element_text(size = legend.title.size, colour =  "black")) +
theme(panel.grid.major.x = element_blank()) +
facet_wrap(vars(gene), scales = "free", nrow = 1)
final_barplot_no_colors
final_barplot_no_colors <- ggplot(data.mean, aes(x = Group, y = mean)) +
geom_errorbar(aes(group = Group,
y = mean,
ymin = ifelse(mean < 0, mean - abs(sd), mean),
ymax = ifelse(mean > 0, mean + abs(sd), mean)),
width = .2,
position = position_dodge(0.9)) +
geom_col(aes(group = Group),
position = position_dodge(.9),
width = 0.7,
color = "black") +
#xlab(x.axis.title) +
#ylab(y.axis.title) +
theme_bw() +
#theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
#theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
#theme(legend.text = element_text(size = legend.text.size, colour ="black")) +
#theme(legend.title = element_text(size = legend.title.size, colour =  "black")) +
theme(panel.grid.major.x = element_blank()) +
facet_wrap(vars(gene), scales = "free", nrow = 1)
final_barplot_no_colors
final_barplot_no_colors <- ggplot(data.mean, aes(x = Group, y = mean)) +
geom_errorbar(aes(group = Group,
y = mean,
ymin = ifelse(mean < 0, mean - abs(sd), mean),
ymax = ifelse(mean > 0, mean + abs(sd), mean)),
width = .2,
position = position_dodge(0.9)) +
geom_col(aes(group = Group),
position = position_dodge(.9),
width = 0.7,
color = "black") +
xlab("") +
#ylab(y.axis.title) +
theme_bw() +
#theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
#theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
#theme(legend.text = element_text(size = legend.text.size, colour ="black")) +
#theme(legend.title = element_text(size = legend.title.size, colour =  "black")) +
theme(panel.grid.major.x = element_blank()) +
facet_wrap(vars(gene), scales = "free", nrow = 1)
final_barplot_no_colors
data.label <- data.frame(matrix(nrow = 3, ncol = 4)) # Number of rows is equal to number of genes
rownames(data.label) <- c("ANGPT1","IL8","VEGFB")
colnames(data.label) <- c("x", "xend", "y", "annotation")
data.label$gene <- rownames(data.label) # Name of column with gene symbols in this table must be the same as name of the column with gene symbols in data used for create the plot.
data.label
data.mean
data.mean %>%
mutate(max = mean + sd)
data.mean <- data.mean %>%
mutate(max = mean + sd)
data.label$y <- 0.5 + data.mean$max
data.mean <- data.mean %>%
mutate(max = mean + sd)
data.mean
data.mean <- data.mean %>%
mutate(max = mean + sd) %>%
group_by(Gene) %>%
summarise(height = max(max, na.rm = TRUE), .groups = "keep")
data.mean <- data.mean %>%
mutate(max = mean + sd) %>%
group_by(gene) %>%
summarise(height = max(max, na.rm = TRUE), .groups = "keep")
data.mean
data.label$y <- 0.5 + data.mean$max
data.mean
data.mean
data.label$y <- 0.5 + data.mean$height
data.label$x <- c(1,1,1)
data.label$xend <- c(1.98,1.98,1.98)
data.label$annotation <- c("****","**","***")
final_barplot_no_colors_labels <- final_barplot_no_colors +
geom_signif(
stat = "identity",
data = data.label,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation,
textsize = 5),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)))
final_barplot_no_colors_labels
final_barplot_no_colors_labels <- final_barplot_no_colors +
geom_signif(
stat = "identity",
data = data.label,
aes(x = x,
xend = xend,
y = y,
yend = y,
annotation = annotation,
textsize = 9),
color = "black",
manual = TRUE) +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)))
final_barplot_no_colors_labels
control_cluster_sample(data.dCt)
control_cluster_sample(data.dCt, label.size = 6)
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1)
log.reg.results[[2]]
#'                            increment = 1)
#'
#' @importFrom dplyr filter mutate ungroup
#' @importFrom stats coef glm setNames
#' @importFrom utils write.table
#' @importFrom ggplot2 ggplot geom_vline geom_point geom_errorbarh scale_color_continuous geom_text coord_flip scale_x_log10 guides xlab ylab labs theme_classic theme element_text ggsave scale_y_continuous expansion facet_wrap element_blank stat_summary
#' @import ggplot2
#' @import tidyverse
#' @import oddsratio
#'
log_reg <- function(data,
sel.Gene = "all",
group.study,
group.ref,
increment,
centerline = 1,
ci = 0.95,
p.adjust = TRUE,
p.adjust.method = "BH",
log.axis = FALSE,
x.axis.title = "Odds ratio",
y.axis.title = "",
axis.title.size = 11,
axis.text.size = 10,
legend.title = "p value",
legend.text.size = 11,
legend.title.size = 11,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600,
width = 15,
height = 15,
name.tiff = "OR_plot",
save.to.txt = FALSE,
name.txt = "OR_results") {
data <- filter(data, Group %in% c(group.study, group.ref))
if (sel.Gene[1] != "all") {
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Gene)]
genes <-
colnames(data)[!colnames(data) %in% c("Group", "Sample")]
} else {
genes <- colnames(data)[!colnames(data) %in% c("Group", "Sample")]
}
data <- mutate(data, Group_num = ifelse(Group == group.ref, 0, 1))
n.genes <- ncol(data) - 3
data.CI <- as.data.frame(matrix(ncol = 9, nrow = n.genes))
colnames(data.CI) <-
c(
"Gene",
"oddsratio",
"CI_low",
"CI_high",
"Increment",
"Intercept",
"coeficient",
"p_intercept",
"p_coef"
)
if (increment == "mean") {
for (x in 1:n.genes) {
data.m <- data %>%
ungroup() %>%
select(all_of(c(genes[x], "Group_num")))
m <- glm(data.m$Group_num ~ ., data = data.m, family = binomial)
l <-
setNames(as.list(mean(as.data.frame(data.m[, genes[x]])[, 1])), genes[x])
or <- or_glm(
data = data.m,
model = m,
incr = l,
ci = 0.95
)
data.CI[x, 1:5] <- or
data.CI[x, 6:7] <- m$coefficients
data.CI[x, 8:9] <- coef(summary(m))[, 4]
}
} else{
for (x in 1:n.genes) {
data.m <- data %>%
ungroup() %>%
select(all_of(c(genes[x], "Group_num")))
m <-
glm(data.m$Group_num ~ ., data = data.m, family = binomial)
l <- setNames(as.list(increment), genes[x])
or <- or_glm(
data = data.m,
model = m,
incr = l,
ci = 0.95
)
data.CI[x, 1:5] <- or
data.CI[x, 6:7] <- m$coefficients
data.CI[x, 8:9] <- coef(summary(m))[, 4]
}
}
data.CI$p_coef_adj <- p.adjust(data.CI$p_coef, method = p.adjust.method)
if (p.adjust == TRUE) {
od_df <- data.frame(
yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Gene,
p = data.CI$p_coef)
} else {
od_df <- data.frame(
yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Gene,
p = data.CI$p_coef_adj
)
}
odd.ratio <-
ggplot(od_df, aes(x = boxOdds, y = boxLabels, label = boxOdds)) +
geom_vline(aes(xintercept = centerline),
linewidth = .25,
linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow),
linewidth = .5,
height = .2) +
geom_point(aes(color = p), size = 3.5) +
scale_color_continuous(type = "viridis") +
geom_text(
aes(label = boxOdds),
hjust = 0.5,
vjust = -1,
size = 3
) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
theme(legend.text = element_text(size = legend.text.size, colour = "black")) +
theme(legend.title = element_text(size = legend.title.size, colour =
"black")) +
theme(plot.title = element_text(size = plot.title.size))
if (log.axis == TRUE) {
odd.ratio <- odd.ratio +
scale_x_log10()
}
print(odd.ratio)
if (save.to.tiff == TRUE) {
ggsave(
paste(name.tiff, ".tiff", sep = ""),
odd.ratio,
dpi = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
}
if (save.to.txt == TRUE) {
write.table(as.data.frame(data.CI), paste(name.txt, ".txt", sep = ""))
}
return(list(odd.ratio, data.CI))
}
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1)
library(oddsratio)
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1)
log.reg.results[[2]]
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1,
p.adjust = TRUE)
log.reg.results[[2]]
log.reg.results[[1]]
#'                            increment = 1)
#'
#' @importFrom dplyr filter mutate ungroup
#' @importFrom stats coef glm setNames
#' @importFrom utils write.table
#' @importFrom ggplot2 ggplot geom_vline geom_point geom_errorbarh scale_color_continuous geom_text coord_flip scale_x_log10 guides xlab ylab labs theme_classic theme element_text ggsave scale_y_continuous expansion facet_wrap element_blank stat_summary
#' @import ggplot2
#' @import tidyverse
#' @import oddsratio
#'
log_reg <- function(data,
sel.Gene = "all",
group.study,
group.ref,
increment,
centerline = 1,
ci = 0.95,
p.adjust = TRUE,
p.adjust.method = "BH",
log.axis = FALSE,
x.axis.title = "Odds ratio",
y.axis.title = "",
axis.title.size = 11,
axis.text.size = 10,
legend.title = "p value",
legend.text.size = 11,
legend.title.size = 11,
legend.position = "right",
plot.title = "",
plot.title.size = 14,
save.to.tiff = FALSE,
dpi = 600,
width = 15,
height = 15,
name.tiff = "OR_plot",
save.to.txt = FALSE,
name.txt = "OR_results") {
data <- filter(data, Group %in% c(group.study, group.ref))
if (sel.Gene[1] != "all") {
data <- data[, colnames(data) %in% c("Group", "Sample", sel.Gene)]
genes <-
colnames(data)[!colnames(data) %in% c("Group", "Sample")]
} else {
genes <- colnames(data)[!colnames(data) %in% c("Group", "Sample")]
}
data <- mutate(data, Group_num = ifelse(Group == group.ref, 0, 1))
n.genes <- ncol(data) - 3
data.CI <- as.data.frame(matrix(ncol = 9, nrow = n.genes))
colnames(data.CI) <-
c(
"Gene",
"oddsratio",
"CI_low",
"CI_high",
"Increment",
"Intercept",
"coeficient",
"p_intercept",
"p_coef"
)
if (increment == "mean") {
for (x in 1:n.genes) {
data.m <- data %>%
ungroup() %>%
select(all_of(c(genes[x], "Group_num")))
m <- glm(data.m$Group_num ~ ., data = data.m, family = binomial)
l <-
setNames(as.list(mean(as.data.frame(data.m[, genes[x]])[, 1])), genes[x])
or <- or_glm(
data = data.m,
model = m,
incr = l,
ci = 0.95
)
data.CI[x, 1:5] <- or
data.CI[x, 6:7] <- m$coefficients
data.CI[x, 8:9] <- coef(summary(m))[, 4]
}
} else{
for (x in 1:n.genes) {
data.m <- data %>%
ungroup() %>%
select(all_of(c(genes[x], "Group_num")))
m <-
glm(data.m$Group_num ~ ., data = data.m, family = binomial)
l <- setNames(as.list(increment), genes[x])
or <- or_glm(
data = data.m,
model = m,
incr = l,
ci = 0.95
)
data.CI[x, 1:5] <- or
data.CI[x, 6:7] <- m$coefficients
data.CI[x, 8:9] <- coef(summary(m))[, 4]
}
}
data.CI$p_coef_adj <- p.adjust(data.CI$p_coef, method = p.adjust.method)
if (p.adjust == TRUE) {
od_df <- data.frame(
yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Gene,
p = data.CI$p_coef_adj)
} else {
od_df <- data.frame(
yAxis = 1:nrow(data.CI),
boxOdds = data.CI$oddsratio,
boxCILow = data.CI$CI_low,
boxCIHigh = data.CI$CI_high,
boxLabels = data.CI$Gene,
p = data.CI$p_coef
)
}
odd.ratio <-
ggplot(od_df, aes(x = boxOdds, y = boxLabels, label = boxOdds)) +
geom_vline(aes(xintercept = centerline),
linewidth = .25,
linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow),
linewidth = .5,
height = .2) +
geom_point(aes(color = p), size = 3.5) +
scale_color_continuous(type = "viridis") +
geom_text(
aes(label = boxOdds),
hjust = 0.5,
vjust = -1,
size = 3
) +
xlab(x.axis.title) + ylab(y.axis.title) +
labs(color = legend.title, title = plot.title) +
theme_bw() +
theme(legend.position = legend.position) +
theme(axis.text = element_text(size = axis.text.size, colour = "black")) +
theme(axis.title = element_text(size = axis.title.size, colour = "black")) +
theme(legend.text = element_text(size = legend.text.size, colour = "black")) +
theme(legend.title = element_text(size = legend.title.size, colour =
"black")) +
theme(plot.title = element_text(size = plot.title.size))
if (log.axis == TRUE) {
odd.ratio <- odd.ratio +
scale_x_log10()
}
print(odd.ratio)
if (save.to.tiff == TRUE) {
ggsave(
paste(name.tiff, ".tiff", sep = ""),
odd.ratio,
dpi = dpi,
width = width,
height = height,
units = "cm",
compression = "lzw"
)
}
if (save.to.txt == TRUE) {
write.table(as.data.frame(data.CI), paste(name.txt, ".txt", sep = ""))
}
return(list(odd.ratio, data.CI))
}
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1,
p.adjust = TRUE)
log.reg.results <- log_reg(data.dCt,
sel.Gene = c("ANGPT1","IL8", "VEGFB"),
group.study = "AAA",
group.ref = "Control",
increment = 1,
p.adjust = FALSE)
